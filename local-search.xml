<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Language is All a Graph Needs</title>
    <link href="/2024/07/01/Language%20is%20All%20a%20Graph%20Needs/"/>
    <url>/2024/07/01/Language%20is%20All%20a%20Graph%20Needs/</url>
    
    <content type="html"><![CDATA[<h1 id="language-is-all-a-graph-needs">Language is All a GraphNeeds</h1><h2 id="摘要">摘要</h2><p>将图问题纳入生成语言建模框架的现有工作仍然非常有限。考虑到 LLM的日益突出， 探索 LLM 是否也可以取代 GNN作为图的基础模型变得至关重要。</p><p>本文提出了基于自然语言指令的高度可扩展提示的InstructGLM(Instruction-finetunedGraph Language Model,指令微调图语言模型)。使用自然语言描述图的多尺度几何结构，然后指令微调LLM来执行图任务，从而实现生成图学习。</p><h2 id="结论">结论</h2><ul><li>这是==首次==尝试通过自然语言描述来表示图结构，展示了LLM作为图ML新基础模型的巨大潜力</li><li>在ogbn-arxiv,Cora和PubMed数据集上的标签==优于所有单模型CNN和GraphTransformer==</li><li>相对于GNN，InstructGLM具有三个优势<ul><li>灵活性</li><li>可扩展性</li><li>兼容性</li></ul></li><li>由于高可扩展性，未来可以很容易扩展到四个有价值的方向<ul><li>利用LLM为InstructGLM生成改进的特征</li><li>使用知识提炼和迭代训练框架增强InstructGLM</li><li>在更多图形任务上部署InstructGLM</li><li>在“everything istokenized“的情况下将InstructGLM扩展到自然语言之外的其他语言，甚至是领域特定语言或标记(如化学语言)</li></ul></li></ul><p>InstructGLM为图机器学习提供了一个强大的NLP接口，以生成式LLM和自然语言为驱动力，进一步促进了跨多个AI领域统一基础模型架构和管道的趋势，以实现AGI(ArtificialGeneral Intelligence, 通用人工智能)</p><h3 id="限制">限制</h3><p>InstructGLM的主要限制是LLM的输入令牌限制，这可能导致在处理大规模图时构造的指令提示无法涵盖单个自然语言句子中包含所有高阶邻居。</p><p>可以为每个节点构建多个图描述句子以枚举相应跳跃级别上所有可能的邻居来解决令牌限制问题，但这会导致训练数据量快速增加。</p><p>论文作者使用==反复从中心节点的多跳邻居列表中进行随机抽样，直到句子长度达到输入token限制==以缓解上面的问题</p><h2 id="instructglm">InstructGLM</h2><h3 id="设计指令提示mathcaltcdot">设计指令提示<spanclass="math inline">\(\mathcal{T}(\cdot)\)</span></h3><ul><li><span class="math inline">\(\mathcal{T}(v,\mathcal{A}, \{\mathcalN_v\}_{v\in \mathcal V},\{\mathcal E_e\}_{e\in E})\)</span></li><li><span class="math inline">\(v\)</span>是提示的中心节点</li><li>ex:包含最多两跳邻居信息的图形描述提示(第一个是简单形式，第二个是包含节点特征、边缘特征、相应中间路径的详细形式）：<ul><li><span class="math inline">\(\mathcal T(v,\mathcal A) = \{v\}\ is\connected\ with\ \{[v_2]_{v_2 \in \mathcal A_2^v}\}\ within\ two\hops\)</span></li><li><span class="math inline">\(\mathcal T(v, \mathcal A, \{\mathcalN_v\}_{v \in \mathcal V}, \{\mathcal E_e\}_{e\in E}) = \{(v,\mathcalN_v)\}\ is\ connected\ with\ \{[(v_2, \mathcal N_{v_2})]_{v_2\in\mathcal A_2^v}\}\ within\ two\ hops\ through\ \{[(v_1, \mathcalN_{v_1})]_{v_1\in \mathcal A_1^v}\}\ and\ featured\ paths\ \{[(\mathcalE_{(v,v_1)}, \mathcal E_{(v_1,v_2)})]_{v_1 \in \mathcal A_1^v,v_2\in\mathcal A_1^{v_1}}\},\ respectively.\)</span></li><li><span class="math inline">\(A_k^v\)</span>表示节点<spanclass="math inline">\(v\)</span>的<spanclass="math inline">\(k\)</span>跳邻居节点列表，<spanclass="math inline">\(\mathcal N_v\)</span>是<spanclass="math inline">\(v\in \mathcal V\)</span>的节点特征，<spanclass="math inline">\(\mathcal E_e\)</span>是<spanclass="math inline">\(e\in E\)</span>的边特征（<spanclass="math inline">\(\mathcal N_v\)</span>和<spanclass="math inline">\(\mathcalE_e\)</span>可以是文本、图片等各种模态信息）</li></ul></li></ul><h3 id="针对节点分类的生成指令调整">针对节点分类的生成指令调整</h3><ul><li>给定图<spanclass="math inline">\(\mathcal{G}=(\mathcal{V},\mathcal{A},E,\{\mathcal{N}_{v}\}_{v\in\mathcal{V}},\{\mathcal{E}_{e}\}_{e\inE} )\)</span>和指令提示<span class="math inline">\(\mathcal T\in{\mathcal T(\cdot)}\)</span>。<spanclass="math inline">\(x\)</span>和<spanclass="math inline">\(y\)</span>分别表示LLM的输入和目标句子</li><li>。。。<ul><li><spanclass="math inline">\(\mathcal{I}=\mathcal{T}(v,\mathcal{A},\{\mathcal{N}_{v}\}_{v\in\mathcal{V}},\{\mathcal{E}_{e}\}_{e\inE})\)</span>是以节点<span class="math inline">\(v\in \mathcalV\)</span>为中心的图结构描述</li><li><span class="math inline">\(\mathcalL\)</span>表示LLM的损失，这里用语言建模中普遍存在的负对数释然(NLL)</li><li><span class="math inline">\(\mathcal P\)</span>和<spanclass="math inline">\(\mathcal Q\)</span>是特定于任务的指令前缀和查询<ul><li>$P = $ ’Classify the central node into one of the followingcategories: [&lt;&gt;]. Pay attention to the multi-hop linkrelationships between the nodes.‘</li><li>$Q = $ 'Which category should <spanclass="math inline">\(\{v\}\)</span> be classified as?'</li></ul></li></ul></li><li><figure><imgsrc="https://cdn.jsdelivr.net/gh/Tippye/PicCloud@master/uPic/figure_2.png"alt="figure_2" /><figcaption aria-hidden="true">figure_2</figcaption></figure><ul><li>使用图形提示以可扩展的小批量方式描述每个节点的多跳连接和元特征，通过纯自然语言简洁直观地传达图形结构以供学习。随后，我们指示LLM在统一的语言建模管道中为各种图形任务生成响应。我们还通过为每个节点创建一个新的唯一标记来扩展LLM 的词汇表。更具体地说，我们将图的固有节点特征向量（例如BoW、OGB）设置为这些新标记的嵌入（在图中表示为红色向量），并使用 LLM的预训练嵌入（在图中表示为蓝色向量）作为自然语言标记。</li></ul></li><li>InstructGLM可以适应图任务的归纳偏差，无需对LLM的架构和管道进行任何更改。</li></ul><h3 id="辅助自监督链接预测">辅助自监督链接预测</h3><ul><li>为了消除指令提示 在单任务半监督学习中只能将标记的训练节点视为中心节点的限制，引入了自监督链接预测作为InstructGLM的基础辅助任务<ul><li>给定任意跳跃级别<spanclass="math inline">\(h\)</span>和中心节点<spanclass="math inline">\(v\)</span>，随机选择跳跃级别<spanclass="math inline">\(h\)</span>的邻居或非邻居作为候选<spanclass="math inline">\(\tilde{v}\)</span><ul><li>判别提示：判别中心节点<spanclass="math inline">\(v\)</span>和候选节点<spanclass="math inline">\(\tilde{v}\)</span>在跳跃级别<spanclass="math inline">\(h\)</span>上是否存在连接</li><li>生成提示：直接生成正确的邻居</li></ul></li></ul></li><li>链接预测的流程与上一步节点分类完全一致，唯一区别在于新设计的任务特定前缀<spanclass="math inline">\(\mathcal P\)</span>和两个不同的查询模板<spanclass="math inline">\(\mathcal Q_{generative}\)</span>和<spanclass="math inline">\(\mathcal Q_{discriminative}\)</span><ul><li>$P = $ 'Perform link prediction for the central node. Pay attentionto the multi-hop link relationships between the nodes.'</li><li><span class="math inline">\(\mathcal{Q}_{generative}=\)</span>'Which other node will be connected to <spanclass="math inline">\(\{v\}\)</span> within <spanclass="math inline">\(\{h\}\)</span> hop?'</li><li><span class="math inline">\(\mathcal{Q}_{discriminative}=\)</span>'Will <span class="math inline">\(\{\tilde{v}\}\)</span> be connected to<span class="math inline">\(\{v\}\)</span> within <spanclass="math inline">\(\{h\}\)</span> hop?'</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>论文精读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>复杂网络</tag>
      
      <tag>NLP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试</title>
    <link href="/2024/06/14/%E6%B5%8B%E8%AF%95/"/>
    <url>/2024/06/14/%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<style>@media not print{    [data-user-color-scheme="dark"] img {        filter: invert(80%);    }}</style><p>这是一篇测试文章</p><iframe src="/notebook/word2vec.ipynb"></iframe><p><img src="/img/avatar1.png" /></p><p>Test</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/06/14/hello-world/"/>
    <url>/2024/06/14/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your veryfirst post. Check <a href="https://hexo.io/docs/">documentation</a> formore info. If you get any problems when using Hexo, you can find theanswer in <ahref="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> oryou can ask me on <ahref="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start">Quick Start</h2><h3 id="create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Link Prediction of Textual Edge Graphs</title>
    <link href="/2024/06/13/Link%20Prediction%20of%20Textual%20Edge%20Graphs/"/>
    <url>/2024/06/13/Link%20Prediction%20of%20Textual%20Edge%20Graphs/</url>
    
    <content type="html"><![CDATA[<h1 id="link-prediction-of-textual-edge-graphs">Link Prediction ofTextual Edge Graphs</h1><center><a href='https://arxiv.org/abs/2405.16606v1'><img src="https://img.shields.io/badge/arxiv-B31B1B?style=for-the-badge&amp;logo=arxiv&amp;logoColor=ffffff" referrerpolicy="no-referrer"></a></center><h2 id="摘要">摘要</h2><p>文本边缘图(TEG,边缘上具有富文本的网络)<strong>封装了大量关系和上下文信息</strong>。但是现有的研究方法分为<strong>基于GNN</strong>和<strong>基于LLM</strong>两类，都有些问题。本文提出一种新的框架(<strong>LINK2DOC</strong>)专门用于TEG上进行<strong>链路预测</strong>(预测两个节点之间是否存在链接)。</p><pre><code class=" mermaid">graph LR    A((&quot;A&lt;br&gt;文本描述: Node A details&quot;)) -- &quot;文本描述: Edge AB details&quot; --- B((&quot;B&lt;br&gt;文本描述: Node B details&quot;))    A -- &quot;文本描述: Edge AC details&quot; --- C((&quot;C&lt;br&gt;文本描述: Node C details&quot;))    B -- &quot;文本描述: Edge BD details&quot; --- D((&quot;D&lt;br&gt;文本描述: Node D details&quot;))    C -- &quot;文本描述: Edge CD details&quot; --- D文本边缘图</code></pre><h3 id="创新点">创新点</h3><p>LINK2DOC通过将节点对之间的邻居信息<strong>总结为类人类编写的文档</strong>，并<strong>利用自监督学习模型</strong>增强GNN的文本理解能力。</p><h3 id="结论">结论</h3><p>在四个真实世界数据集上的实验表明，LINK2DOC在链接预测任务中的表现优于现有的边缘感知GNNs和预训练语言模型。</p><h2 id="研究问题">研究问题</h2><ul><li><p>基于LLM的问题：容易丢失图形的结构信息</p></li><li><p>基于GNN的问题：无法解释TEG中可能发生的复杂交互</p></li><li><p>研究目标：提出一种新框架(LINK2DOC)，旨在解决现有方法的不足，更好的进行TEG上的链路预测。</p></li></ul><h2 id="研究方法">研究方法</h2><ul><li><p>LINK2DOC</p><ul><li><strong>连贯的文档组合</strong>，用通俗易懂的人话来描述节点对之间局部的拓扑信息，保留语义和拓扑信息</li><li><strong>自监督学习模块</strong>，用自监督学习模型增强GNN语言处理能力</li></ul></li><li><p>转换图</p><ul><li>用于捕捉和表示TEG中两个节点之间的所有可能的路径</li><li><img src="https://cdn.jsdelivr.net/gh/Tippye/PicCloud@master/uPic/image-20240613123859383.png" alt="image-20240613123859383" style="zoom:50%;" /></li><li><strong>定义：</strong>对于TEG中的任意两个实体(节点) <spanclass="math inline">\((s, t)\)</span>,从<spanclass="math inline">\(s\)</span>到<spanclass="math inline">\(t\)</span>的所有路径共同形成一个<spanclass="math inline">\((s, t)\)</span>的转换图，用<spanclass="math inline">\(G(s, t)\)</span>表示。分别用<spanclass="math inline">\(m\)</span>和<spanclass="math inline">\(n\)</span>表示<spanclass="math inline">\(G(s,t)\)</span>中的节点数和边数。路径长度上限可以用整数<spanclass="math inline">\(K\)</span>来设定，通常可以将其设置为TEG的直径。</li><li>构建方法：<ol type="1"><li>广度优先搜索(BFS)<ul><li>从源节点<spanclass="math inline">\(s\)</span>开始，执行BFS来探索到目标节点<spanclass="math inline">\(t\)</span>的所有路径</li><li>BFS的深度可以设置为转换图直径的一半，以确保覆盖到足够的局部领域信息</li></ul></li><li>提取局部结构<ul><li>提取源节点<span class="math inline">\(s\)</span>和目标节点<spanclass="math inline">\(t\)</span>的局部结构，分别记为<spanclass="math inline">\(G_s\)</span>和<spanclass="math inline">\(G_t\)</span>​<ul><li>分别对源节点<span class="math inline">\(s\)</span>和目标节点<spanclass="math inline">\(t\)</span>进行BFS，提取他们各自的深度为<spanclass="math inline">\(L\)</span>的局部结构，</li><li><span class="math inline">\(s\)</span>进行BFS时，深度小于等于<spanclass="math inline">\(L\)</span>(为了<spanclass="math inline">\(G_s\)</span>和<spanclass="math inline">\(G_t\)</span>都能各自覆盖其近邻信息以及足够数量的节点，<spanclass="math inline">\(L\)</span>通常设置为<spanclass="math inline">\(G(s,t)\)</span>直径的一半)就把节点染橙色(仅论文示意图)，<spanclass="math inline">\(t\)</span>同理染成蓝色，两边都染色就成了两种颜色的节点</li></ul></li><li><figure><imgsrc="https://cdn.jsdelivr.net/gh/Tippye/PicCloud@master/uPic/image-20240613125659758.png"alt="image-20240613125659758" /><figcaption aria-hidden="true">image-20240613125659758</figcaption></figure></li></ul></li><li>处理隐藏边<ul><li>在BFS树中，某些边可能不会被直接探索到（例如，由于搜索深度限制或边不存在于BFS树中）。</li><li>识别这些隐藏边，并在转换图中适当地表示它们，以确保转换图的完整性。</li></ul></li><li>合并转换图<ul><li>将<span class="math inline">\(G_s\)</span>和<spanclass="math inline">\(G_t\)</span>合并为一个完整的转换图<spanclass="math inline">\(G(s, t)\)</span>,这个图包含了从<spanclass="math inline">\(s\)</span> 到<spanclass="math inline">\(t\)</span> 的所有路径和边</li></ul></li></ol></li></ul></li><li><p>转换文档构建</p><ul><li><p>用于整合语义和拓扑信息</p></li><li><figure><imgsrc="https://cdn.jsdelivr.net/gh/Tippye/PicCloud@master/uPic/x3.png"alt="Refer to caption" /><figcaption aria-hidden="true">Refer to caption</figcaption></figure></li><li><p>构建方法：</p><ol type="1"><li><p>先得到上一步的转换图<spanclass="math inline">\(G(s,t)\)</span></p></li><li><p>使用前序遍历来分别遍历<spanclass="math inline">\(G_s\)</span>和<spanclass="math inline">\(G_t\)</span>​中的节点，并为每个节点分配文档中的章节和小节序号，如下图</p><p><img src="https://cdn.jsdelivr.net/gh/Tippye/PicCloud@master/uPic/image-20240613183725337.png" alt="image-20240613183725337" style="zoom: 33%;" /></p></li><li><p>识别并添加那些在局部结构中不直接出现，但在转换图中存在的隐藏边</p></li><li><p>识别 <span class="math inline">\(G_s\)</span>和 <spanclass="math inline">\(G_t\)</span>中的共享节点，这些节点在转换文档中需要有交叉引用，以显示它们在不同局部结构中的连接</p></li><li><p>最终将<span class="math inline">\(s\)</span>和<spanclass="math inline">\(t\)</span>的局部结构段落合并为一个统一的文档，确保文档不仅描述孤立的节点，还突出了他们之间的相互连接。</p><p><img src="https://cdn.jsdelivr.net/gh/Tippye/PicCloud@master/uPic/image-20240613182533646.png" alt="image-20240613182533646" style="zoom:33%;" /></p></li></ol></li></ul></li><li><p>自监督学习模块</p><ul><li>使用预训练模型PLM来处理转换文档<spanclass="math inline">\(d_{(s,t)}\)</span>，以保持文本的完整性，得到文档的潜在表示<spanclass="math inline">\(\widetilde h_{(s,t)} =f_{LM}(d_{(s,t)})\)</span></li><li>通过GNN处理转换图中的图结构和边文本信息，生成表示<spanclass="math inline">\(h_{(s,t)} = g(f_{GNN}(G_s) \oplusf_{GNN}(G_t))\)</span></li><li>使用加权交叉熵损失对齐<span class="math inline">\(\widetildeh\)</span>和<span class="math inline">\(h\)</span>，<spanclass="math inline">\(\ell_{KD} = -\mathbb{E}\left[\log\frac{\exp\left(sim(\widetilde h_{(s, t)}, h_{(s,t)})/\tau\right)}{\sum^K_{k=1}\exp\left(sim(h_{(s, t)}, h_{(s,k)})/\tau\right)}\right]\)</span></li><li>最终用于预测边属性图上的链接的LLM增强表示学习的总体目标写为<spanclass="math inline">\(\ell = \lambda_1 \ell_{KD} + \lambda_2\ell_{LP}\)</span>,其中<spanclass="math inline">\(\lambda_1\)</span>和<spanclass="math inline">\(\lambda_2\)</span>是超参数</li></ul></li><li><p>时间复杂度</p><ul><li>训练：<span class="math inline">\(O(2N+E+P^2+|E| \cdotf+N^2)\)</span></li><li>推理：<span class="math inline">\(O(|E| \cdot f + N^2)\)</span></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>论文精读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>复杂网络</tag>
      
      <tag>NLP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GraphTranslator: Aligning Graph Model to Large Language Model for Open-ended Tasks</title>
    <link href="/2024/06/01/GraphTranslator:%20Aligning%20Graph%20Model%20to%20Large%20Language%20Model%20for%20Open-ended%20Tasks/"/>
    <url>/2024/06/01/GraphTranslator:%20Aligning%20Graph%20Model%20to%20Large%20Language%20Model%20for%20Open-ended%20Tasks/</url>
    
    <content type="html"><![CDATA[<ul><li><h1id="graphtranslator-aligning-graph-model-to-large-language-model-for-open-ended-tasks">GraphTranslator:Aligning Graph Model to Large Language Model for Open-endedTasks</h1></li></ul><center><a href='https://github.com/alibaba/GraphTranslator'><img src="https://img.shields.io/badge/GitHub-100000?style=for-the-badge&logo=github&logoColor=white" /></a><a href='https://arxiv.org/abs/2402.07197v4'><img src="https://img.shields.io/badge/arxiv-B31B1B?style=for-the-badge&amp;logo=arxiv&amp;logoColor=ffffff" referrerpolicy="no-referrer"></a><a href='https://mp.weixin.qq.com/s/qqbeiac-p5tKto4YSYSiNw'><img src="https://img.shields.io/badge/WeChat-07c168?style=for-the-badge&amp;logo=wechat&amp;logoColor=ffffff" referrerpolicy="no-referrer"></a></center><h2 id="论文要做什么">论文要做什么</h2><p>通过LLM(大语言模型)与GM(图模型)相结合，实现一个既能解决<strong>预定义任务</strong>又能解决<strong>开放式任务</strong>的模型。</p><p>实验结果表明，该方法在零样本分类等任务中表现出色，并具有广泛的应用前景。</p><h2 id="论文方法">论文方法</h2><p>本文主要方法是将LLM与GM相结合。共包括四个模块：<strong>冻结的GM</strong>、<strong>冻结的LLM</strong>、<strong>Producer</strong>、<strong>Translator</strong>。</p><p>四个模块作用如下：</p><ul><li>冻结的GM：<ul><li>编码节点嵌入信息</li><li>Producer阶段，通过图模型找到节点的邻居节点</li></ul></li><li>冻结的LLM：<ul><li>提供自然语言描述能力</li><li>生成节点嵌入和文本描述的配对数据</li></ul></li><li>Producer：<ul><li>利用LLM生成节点嵌入和文本描述的配对数据，并文本化节点信息</li></ul></li><li>Translator：<ul><li>将图节点嵌入转换为LLM可理解的token嵌入</li><li>学习graph queries来提取语言信息并适配LLM</li></ul></li></ul><p>训练后，带有Translator的LLM能处理各种开放式任务</p><figure><imgsrc="https://cdn.jsdelivr.net/gh/alibaba/GraphTranslator@main/figure/model.jpg"alt="model" /><figcaption aria-hidden="true">model</figcaption></figure><h2 id="实现">实现</h2><h3 id="环境">环境</h3><p>论文作者使用的配置如下：</p><ul><li>CPU: Intel(R) Xeon(R) Platinum 8163 CPU @ 2.50GHz</li><li>GPU: Tesla V100-SXM2-32GB</li><li>OS: Linux (Ubuntu 18.04.6 LTS)</li><li>Python==3.9, CUDA==11.4, Pytorch==1.12.1</li></ul><p>我论文复现时使用的配置如下：</p><ul><li>CPU: 15 vCPU AMD EPYC 9754 128-Core Processor</li><li>GPU: RTX 4090D(24GB) * 1</li><li>镜像: Miniconda conda3 Python 3.10(ubuntu22.04) Cuda 11.8</li><li>来自AutoDL的4090D实例</li></ul><blockquote><p>实际运行中显存在16G左右，所以想复现程序可能需要显存在16G以上的显卡。</p><p>由于个别库在Windows安装失败，所以需要Ubuntu环境。</p><p>CPU和mps执行会在加载<code>ChatGLM2-6B</code>模型时报错。</p><p>4090D按速度估计可能需要半个月可以执行完Producer模块</p></blockquote><h3 id="producer">Producer</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd ./Producer/inference<br>python producer.py<br></code></pre></td></tr></table></figure><p>这部分代码主要执行下面三行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 加载大语言模型</span><br>model = LLM(args)<br><span class="hljs-comment"># 读数据集</span><br>arxiv_data, sample_neighbor_df = read_arxiv_dataset()<br><span class="hljs-comment"># 用LLM推理得到高质量对齐数据</span><br>model.inference_chatglm_arxiv(arxiv_data, sample_neighbor_df)<br></code></pre></td></tr></table></figure><p>其中LLM类模型代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">LLM</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, args, **kwargs</span>):<br>        <span class="hljs-built_in">super</span>().__init__()<br>        self._args = args<br>        <span class="hljs-comment"># tokenizer</span><br>        self.tokenizer = AutoTokenizer.from_pretrained(self._args.llm_checkpoint, trust_remote_code=<span class="hljs-literal">True</span>)<br>        <span class="hljs-comment"># model</span><br>        torch.cuda.empty_cache() <span class="hljs-comment"># 这里显存溢出了</span><br>        <span class="hljs-keyword">try</span>:<br>            self.llm = AutoModel.from_pretrained(self._args.llm_checkpoint, trust_remote_code=<span class="hljs-literal">True</span>).half().to(device)<br>        <span class="hljs-keyword">except</span> RuntimeError:<br>            self.llm = AutoModel.from_pretrained(self._args.llm_checkpoint, trust_remote_code=<span class="hljs-literal">True</span>).<span class="hljs-built_in">float</span>().to(torch.device(<span class="hljs-string">&#x27;cpu&#x27;</span>))<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inference_chatglm_arxiv</span>(<span class="hljs-params">self, arxiv_data, sample_neighbor_df</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        遍历arxiv_data的每一个节点</span><br><span class="hljs-string">            对于每一个节点使用LLM生成他的五个关键词和对所有邻居节点主题和内容的总结</span><br><span class="hljs-string">        将这些数据和id等信息存入summary_embeddings.csv</span><br><span class="hljs-string"></span><br><span class="hljs-string">        Args:</span><br><span class="hljs-string">            arxiv_data:</span><br><span class="hljs-string">            sample_neighbor_df:</span><br><span class="hljs-string"></span><br><span class="hljs-string">        Returns:</span><br><span class="hljs-string"></span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        self.llm.<span class="hljs-built_in">eval</span>()<br><br>        <span class="hljs-comment"># &#123;0: &quot;Title: evasion... Abstract: In security-sensitive...&quot;,1: &quot;Title: ...&quot;&#125;</span><br>        node_title_and_abs = arxiv_data.set_index(<span class="hljs-string">&#x27;node_id&#x27;</span>)[<span class="hljs-string">&#x27;title_abstract&#x27;</span>].to_dict()<br><br>        <span class="hljs-comment"># value是key的邻居节点列表</span><br>        <span class="hljs-comment"># src_to_dst_dict = &#123;0: [74997, 81796, 86748, 122809, 163274], 1: ...&#125;</span><br>        src_to_dst_dict = sample_neighbor_df.groupby(<span class="hljs-string">&#x27;src_node&#x27;</span>)[<span class="hljs-string">&#x27;dst_node&#x27;</span>].apply(<span class="hljs-built_in">list</span>).to_dict()<br><br>        <span class="hljs-comment"># node2title = &#123;0: &#x27;evasion attacks against machine learning at test time&#x27;,1: &#x27;...&#x27;&#125;</span><br>        node2title = arxiv_data.set_index(<span class="hljs-string">&#x27;node_id&#x27;</span>)[<span class="hljs-string">&#x27;title&#x27;</span>].to_dict()<br><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;time.strftime(<span class="hljs-string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>, time.localtime(time.time()))&#125;</span> total paper count: <span class="hljs-subst">&#123;arxiv_data.shape[<span class="hljs-number">0</span>]&#125;</span>&quot;</span>)<br>        summary = []<br>        <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> arxiv_data.iterrows():<br>            <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">            对于每个节点，生成一句‘The title and abstract of this paper are as follows: Title:&#123;论文标题&#125;, Abstract: &#123;论文摘要&#125;\n please summarize this paper and list five key words of this paper. All answers are in English and No Chinese in your answer&#x27;</span><br><span class="hljs-string">            用这句话询问LLM，可以得到五个关键词</span><br><span class="hljs-string">            &quot;&quot;&quot;</span><br>            node_id = data[<span class="hljs-number">1</span>][<span class="hljs-string">&#x27;node_id&#x27;</span>]<br>            title = data[<span class="hljs-number">1</span>][<span class="hljs-string">&#x27;title&#x27;</span>]<br>            src_prompt_pre = <span class="hljs-string">&quot;The title and abstract of this paper are as follows: &quot;</span><br>            src_prompt = <span class="hljs-string">&#x27;\n please summarize this paper and list five key words of this paper. All answers are in English and No Chinese in your answer&#x27;</span><br>            src_title_abstract = data[<span class="hljs-number">1</span>][<span class="hljs-string">&#x27;title_abstract&#x27;</span>]<br>            node_word_input = src_prompt_pre + src_title_abstract<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(node_word_input[<span class="hljs-number">0</span>]) &gt; <span class="hljs-number">3000</span>- <span class="hljs-built_in">len</span>(src_prompt):<br>                node_word_input = node_word_input[:<span class="hljs-number">3000</span>-<span class="hljs-built_in">len</span>(src_prompt)]<br>            node_word_input += src_prompt<br><br>            <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">            找到节点的邻居节点，生成一句‘\n The title and abstract of this paper are as follows: Title:&#123;论文标题&#125;, Abstract: &#123;论文摘要&#125;\nTitle:... \n Please summarize the topic and content of these papers. All answers are in English and No Chinese in your answer&#x27;</span><br><span class="hljs-string">            用这句话询问LLM，可以得到对所有邻居节点主题和内容的总结</span><br><span class="hljs-string">            &quot;&quot;&quot;</span><br>            dst_prompt_pre = <span class="hljs-string">&#x27;\n The paper title and abstract are provided as follows: &#x27;</span><br>            dst_prompt = <span class="hljs-string">&quot;\n Please summarize the topic and content of these papers. All answers are in English and No Chinese in your answer&quot;</span><br>            dst_title_abstract = <span class="hljs-string">&quot;&quot;</span><br>            <span class="hljs-keyword">for</span> neighbor_id <span class="hljs-keyword">in</span> src_to_dst_dict[node_id]:<br>                dst_title_abstract = dst_title_abstract + node_title_and_abs[neighbor_id] + <span class="hljs-string">&#x27;\n&#x27;</span><br><br>            neighbor_word_input  = dst_prompt_pre + dst_title_abstract<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(neighbor_word_input[<span class="hljs-number">0</span>]) &gt; <span class="hljs-number">3000</span>-<span class="hljs-built_in">len</span>(dst_prompt):<br>                neighbor_word_input = neighbor_word_input[:<span class="hljs-number">3000</span>-<span class="hljs-built_in">len</span>(dst_prompt)]<br>            neighbor_word_input += dst_prompt<br><br>            <span class="hljs-keyword">try</span>:<br>                <span class="hljs-comment"># 从标题和摘要生成5个关键词</span><br>                response_node, _ = self.llm.chat(self.tokenizer,<br>                                                        node_word_input ,<br>                                                        history=[])<br>                response_neighbor, _ = self.llm.chat(self.tokenizer,<br>                                                            neighbor_word_input,<br>                                                            history=[])<br>                summary.append(&#123;<br>                    <span class="hljs-string">&#x27;node_id&#x27;</span>: node_id,<br>                    <span class="hljs-string">&#x27;title&#x27;</span>: title,<br>                    <span class="hljs-string">&#x27;response_node&#x27;</span>: response_node,<br>                    <span class="hljs-string">&#x27;response_neighbor&#x27;</span>: response_neighbor<br>                &#125;)<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;time.strftime(<span class="hljs-string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>, time.localtime(time.time()))&#125;</span> paper <span class="hljs-subst">&#123;node_id+<span class="hljs-number">1</span>&#125;</span> title: \&quot;<span class="hljs-subst">&#123;title&#125;</span>\&quot;&quot;</span>)<br>            <span class="hljs-keyword">except</span> RuntimeError <span class="hljs-keyword">as</span> exception:<br>                <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;out of memory&quot;</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>(exception):<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;CUDA out of memory error detected, skipping this batch&quot;</span>)<br>                    <span class="hljs-keyword">continue</span><br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-keyword">continue</span><br><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        将前面所获得的所有回答整理格式存入summary_embeddings.csv</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        summary_df = pd.DataFrame(summary)<br>        embeddings = torch.load(<span class="hljs-string">&quot;../../data/arxiv/graphsage_node_embeddings.pt&quot;</span>).to(<span class="hljs-string">&#x27;cpu&#x27;</span>)<br>        new_data = []<br>        <span class="hljs-keyword">for</span> _, row <span class="hljs-keyword">in</span> summary_df.iterrows():<br>            node_id = <span class="hljs-built_in">int</span>(row[<span class="hljs-string">&#x27;node_id&#x27;</span>])<br>            embedding = np.array(embeddings[node_id].detach())<br>            str_array = [<span class="hljs-built_in">str</span>(num) <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> embedding]<br>            str_representation = <span class="hljs-string">&quot;, &quot;</span>.join(str_array)<br>            title = node2title[row[<span class="hljs-string">&#x27;node_id&#x27;</span>]]<br><br>            new_data.append(&#123;<br>                <span class="hljs-string">&#x27;node_id&#x27;</span>: node_id,<br>                <span class="hljs-string">&#x27;embedding&#x27;</span>:str_representation,<br>                <span class="hljs-string">&#x27;paper_summary&#x27;</span>:row[<span class="hljs-string">&#x27;response_node&#x27;</span>],<br>                <span class="hljs-string">&#x27;citepapers_summary&#x27;</span>:row[<span class="hljs-string">&#x27;response_neighbor&#x27;</span>],<br>                <span class="hljs-string">&#x27;title&#x27;</span>:title<br>                &#125;)<br>        summary_embeddings = pd.DataFrame(new_data)<br>        summary_embeddings.to_csv(<span class="hljs-string">&#x27;../../data/arxiv/summary_embeddings.csv&#x27;</span>,index=<span class="hljs-literal">False</span>)<br></code></pre></td></tr></table></figure><p>生成的结果如下图<imgsrc="https://cdn.jsdelivr.net/gh/tippye/PicCloud@master/uPic/2024/05/29/image-20240529105119919.png"alt="image-20240529105119919" /></p><h2 id="translator-train">Translator-Train</h2><p>训练共需要两个阶段</p><h4id="stage1训练translator进行gm和文本的对齐">stage1：训练Translator进行GM和文本的对齐。</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd ./Translator/train<br>python train.py --cfg-path ./pretrain_arxiv_stage1.yaml<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>(<span class="hljs-params">job_id</span>):<br>    cfg = Config(parse_args())<br><br>    init_distributed_mode(cfg.run_cfg)<br>    setup_seeds(cfg)<br>    setup_logger()<br>    cfg.pretty_print()<br><br>    task = tasks.setup_task(cfg)<br><br>    datasets = task.build_datasets(cfg)<br>    model = task.build_model(cfg)<br>    runner = get_runner_class(cfg)(<br>        cfg=cfg,<br>        job_id=job_id,<br>        task=task,<br>        model=model,<br>        datasets=datasets<br>    )<br>    runner.train()<br></code></pre></td></tr></table></figure><p>执行时，这里的<code>task</code>主要用于多线程，我们需要关注的主要是<code>runner.train()</code>过程</p><ul><li><p>第一阶段使用的数据集为<code>producer</code>生成的<code>summary_embeddings.csv</code>文件<ahref="https://github.com/alibaba/GraphTranslator/blob/main/data/arxiv/summary_embeddings.csv"><img src="https://github.githubassets.com/favicons/favicon.svg" style="zoom:50%;" /></a></p></li><li><p>训练使用的优化器为<code>AdamW</code><ahref="https://github.com/alibaba/GraphTranslator/blob/main/Translator/runners/runner_base.py#L91"><img src="https://github.githubassets.com/favicons/favicon.svg" style="zoom:50%;" /></a></p><ul><li>这一步会将参数分为有权重衰减和无权重衰减的两种参数<ul><li>有权重衰减的参数包括维度大于等于2的和名称中包含<code>bias</code>或<code>ln</code>或<code>bn</code>的参数</li><li>衰减权重配置为<code>0.05</code></li><li>无衰减的参数衰减权重配置为<code>0</code></li></ul></li><li>学习率配置为<code>1e-4</code></li><li>Adam算法中的第一阶矩估计和第二阶矩估计的指数衰减率设置为固定值<code>0.9</code>和<code>0.999</code></li></ul></li><li><p>这里的<code>runner</code>追溯代码可以发现用的是默认的类<code>runner_base</code><ahref="https://github.com/alibaba/GraphTranslator/blob/main/Translator/runners/runner_base.py"><img src="https://github.githubassets.com/favicons/favicon.svg" style="zoom:50%;" /></a>。</p></li><li><p>最终追溯到训练每个epoch的代码为<code>base_task._train_inner_loop()</code><ahref="https://github.com/alibaba/GraphTranslator/blob/main/Translator/tasks/base_task.py#L149"><img src="https://github.githubassets.com/favicons/favicon.svg" style="zoom:50%;" /></a></p><ul><li><p>使用的预训练模型为<code>TranslatorQformerArxiv</code>，基于<code>Q-Former</code>,使用<code>bert-base-uncased</code>与训练参数进行初始化</p><ul><li>特征数为768</li><li>最大文本长度512</li><li>Qformer查询令牌数量为32</li><li>Qformer交叉注意力频率为2</li></ul></li><li><p>模型的前向传播过程<ahref="https://github.com/alibaba/GraphTranslator/blob/main/Translator/models/translator_models/translator_qformer_arxiv.py#L90"><img src="https://github.githubassets.com/favicons/favicon.svg" style="zoom:50%;" /></a></p><ul><li><p>对比目标(图文对比)<ahref="https://github.com/alibaba/GraphTranslator/blob/main/Translator/models/translator_models/translator_qformer_arxiv.py#L127"><img src="https://github.githubassets.com/favicons/favicon.svg" style="zoom:50%;" /></a></p><ul><li><blockquote><p>通过计算<span class="math inline">\(H_v\)</span>与<spanclass="math inline">\(T_v\)</span>​之间的相似度，并选择最高得分来最大化二者的互信息</p></blockquote></li><li><p>分别将图像文本特征合并，使用<code>torch.matmul</code>分别计算得到图像与文本之间的特征相似度<code>sim_q2t</code>和文本与图像之间的特征相似度<code>sim_t2q</code></p></li><li><p>分别取最大值然后进行归一化得到<code>sim_i2t</code>和<code>sim_t2i</code></p></li></ul></li><li><p>生成目标</p><ul><li><blockquote><p>根据节点嵌入<spanclass="math inline">\(z_v\)</span>生成描述文本，并优化生成文本与实际节点描述之间的交叉熵损失，使得querytokens <span class="math inline">\(Q\)</span>能捕获更多与<spanclass="math inline">\(t_v\)</span>相关的细节。</p></blockquote></li><li>最后使用交叉熵损失函数分别计算<code>sim_i2t</code>和<code>sim_t2i</code>与<code>targets</code>之间的损失，取二者均值作为损失</li></ul></li><li><p>图文匹配<ahref="https://github.com/alibaba/GraphTranslator/blob/main/Translator/models/translator_models/translator_qformer_arxiv.py#L162"><img src="https://github.githubassets.com/favicons/favicon.svg" style="zoom:50%;" /></a></p><ul><li>使用<code>softmax</code>分别计算图像到文本的相似度<code>weights_i2t</code>和文本到图像的相似度<code>weights_t2i</code></li><li>对于每个文本，取一个负样本图像放在<code>behavior_embeds_neg</code>；对于每个图像，取一个负样本文本放在<code>text_atts_neg</code></li><li>将正样本和负样本的文本ID、注意力掩码以及行为嵌入进行堆叠和拼接，形成<code>text_ids_all</code>,<code>text_atts_all</code>, <code>behavior_embeds_all</code></li><li>扩展查询令牌<code>query_tokens_itm</code>并创建对应的注意力掩码<code>query_atts_itm</code></li><li>使用<code>bert</code>模型进行处理得到<code>vl_embeddings</code></li><li>使用交叉熵函数计算损失<code>loss_itm</code>，这表示模型在预测匹配度时的错误率，是训练中需要最小化的量。</li></ul></li><li><p>图像描述<ahref="https://github.com/alibaba/GraphTranslator/blob/main/Translator/models/translator_models/translator_qformer_arxiv.py#L230"><img src="https://github.githubassets.com/favicons/favicon.svg" style="zoom:50%;" /></a></p><ul><li>使用<code>bert</code>模型计算语言模型的损失</li></ul></li><li><p>返回前三步计算得到的损失值，将三种损失值的和作为损失</p></li></ul></li><li><p>每次训练中</p></li><li><p>使用AMP(自动混合精度)进行前向传播和计算损失</p></li><li><p>每隔32次迭代更新一次参数</p></li><li><p>在所有进程之间通过<code>MetricLogger</code>同步数据，输出平均值</p></li><li><p>返回平均后的损失和学习率</p></li><li><blockquote><p>细粒度对齐通过将每个节点嵌入<spanclass="math inline">\(h_{v,i}\)</span>与[CLS]标记<spanclass="math inline">\(\overlinet_v\)</span>​拼接并输入二分类器来学习，计算所有查询的logits平均值作为匹配得分。</p></blockquote></li></ul></li><li><p>第二阶段</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>论文精读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>复杂网络</tag>
      
      <tag>NLP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Bipartite network projection and personal recommendation</title>
    <link href="/2024/05/19/Bipartite%20network%20projection%20and%20personal%20recommendation/"/>
    <url>/2024/05/19/Bipartite%20network%20projection%20and%20personal%20recommendation/</url>
    
    <content type="html"><![CDATA[<h1id="bipartite-network-projection-and-personal-recommendation">Bipartitenetwork projection and personal recommendation</h1><blockquote><p>原文链接：<a href="https://arxiv.org/abs/0707.0540">How to project abipartite network?</a></p></blockquote><h2 id="论文要做什么">论文要做什么？</h2><p>这篇论文主要提出了一种加权方法(NBI)，用来保留二分网络的原始信息<font size="1rem" color="grey">(因为单模投影压缩二分网络会丢失信息)</font>。除此之外为了展示性能，用用户-电影数据比较了另外两种方法和本文提出方法的性能区别。</p><h2 id="文章实验">文章实验</h2><ul><li><p>数据集使用<ahref="https://grouplens.org/datasets/movielens/">MovieLens</a></p></li><li><p>对比算法：</p><ul><li>GRM(Global Ranking Method)</li><li>CF(Collaborative Filtering)</li><li>NBI(Network-Based Inference)</li></ul></li><li><p>实验结果：</p><ul><li><p>NBI &gt; CF &gt; GRM</p><figure><imgsrc="https://cdn.jsdelivr.net/gh/tippye/PicCloud@master/uPic/2024/05/09/1.png"alt="The hitting rate as a function of the length of recommendation list." /><figcaption aria-hidden="true">The hitting rate as a function of thelength of recommendation list.</figcaption></figure></li></ul></li></ul><h2 id="实验复现">实验复现</h2><p><ahref="https://cdn.jsdelivr.net/gh/tippye/PicCloud@master/uPic/2024/05/09/movielens.zip">我使用的数据集在这</a></p><ol type="1"><li><p>导入的包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> networkx <span class="hljs-keyword">as</span> nx<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> pathlib<br>%matplotlib inline<br></code></pre></td></tr></table></figure></li><li><p>读取数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">users = pd.read_csv(DATA_DIR / <span class="hljs-string">&#x27;u.user&#x27;</span>, sep=<span class="hljs-string">&#x27;|&#x27;</span>, names=[<span class="hljs-string">&#x27;user_id&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>, <span class="hljs-string">&#x27;gender&#x27;</span>, <span class="hljs-string">&#x27;occupation&#x27;</span>, <span class="hljs-string">&#x27;zip_code&#x27;</span>])<br>occupation = pd.read_csv(DATA_DIR / <span class="hljs-string">&#x27;u.occupation&#x27;</span>, header=<span class="hljs-literal">None</span>, names=[<span class="hljs-string">&#x27;occupation&#x27;</span>])<br>movies = pd.read_csv(DATA_DIR / <span class="hljs-string">&#x27;u.item&#x27;</span>, sep=<span class="hljs-string">&#x27;|&#x27;</span>,<br>                     names=[<span class="hljs-string">&#x27;movie_id&#x27;</span>, <span class="hljs-string">&#x27;movie_title&#x27;</span>, <span class="hljs-string">&#x27;release_date&#x27;</span>, <span class="hljs-string">&#x27;video_release_date&#x27;</span>, <span class="hljs-string">&#x27;IMDb_URL&#x27;</span>, <span class="hljs-string">&#x27;unknown&#x27;</span>, <span class="hljs-string">&#x27;Action&#x27;</span>, <span class="hljs-string">&#x27;Adventure&#x27;</span>, <span class="hljs-string">&#x27;Animation&#x27;</span>, <span class="hljs-string">&#x27;Children\&#x27;s&#x27;</span>, <span class="hljs-string">&#x27;Comedy&#x27;</span>, <span class="hljs-string">&#x27;Crime&#x27;</span>, <span class="hljs-string">&#x27;Documentary&#x27;</span>, <span class="hljs-string">&#x27;Drama&#x27;</span>, <span class="hljs-string">&#x27;Fantasy&#x27;</span>, <span class="hljs-string">&#x27;Film-Noir&#x27;</span>, <span class="hljs-string">&#x27;Horror&#x27;</span>, <span class="hljs-string">&#x27;Musical&#x27;</span>, <span class="hljs-string">&#x27;Mystery&#x27;</span>, <span class="hljs-string">&#x27;Romance&#x27;</span>, <span class="hljs-string">&#x27;Sci-Fi&#x27;</span>, <span class="hljs-string">&#x27;Thriller&#x27;</span>, <span class="hljs-string">&#x27;War&#x27;</span>, <span class="hljs-string">&#x27;Western&#x27;</span>], encoding=<span class="hljs-string">&#x27;ISO-8859-1&#x27;</span>)  <span class="hljs-comment"># 列明在数据集的README,编码utf8打不开，PyCharm给建议的ISO-8859-1</span><br><br>DataIndex = <span class="hljs-number">1</span>  <span class="hljs-comment"># 数据集给了u1-u5,不知道为什么要分</span><br>train = pd.read_csv(DATA_DIR / <span class="hljs-string">f&#x27;u<span class="hljs-subst">&#123;DataIndex&#125;</span>.base&#x27;</span>, sep=<span class="hljs-string">&#x27;\t&#x27;</span>, names=[<span class="hljs-string">&#x27;user_id&#x27;</span>, <span class="hljs-string">&#x27;item_id&#x27;</span>, <span class="hljs-string">&#x27;rating&#x27;</span>, <span class="hljs-string">&#x27;timestamp&#x27;</span>])<br>test = pd.read_csv(DATA_DIR / <span class="hljs-string">f&#x27;u<span class="hljs-subst">&#123;DataIndex&#125;</span>.test&#x27;</span>, sep=<span class="hljs-string">&#x27;\t&#x27;</span>, names=[<span class="hljs-string">&#x27;user_id&#x27;</span>, <span class="hljs-string">&#x27;item_id&#x27;</span>, <span class="hljs-string">&#x27;rating&#x27;</span>, <span class="hljs-string">&#x27;timestamp&#x27;</span>])<br></code></pre></td></tr></table></figure></li><li><p>数据预处理</p><ul><li><p>这里创建了一张<code>n*m</code>大小的矩阵<code>collected_frame</code>，其中<code>n</code>为电影的总数，<code>m</code>为用户总数，表中数据为<code>1</code>表示用户“收集/收藏”了这部电影，<code>0</code>表示未收藏。</p></li><li><p>即<code>collected_frame.loc[i,j]=1</code>表示用户<code>j+1</code>收集了电影<code>i+1</code>(这里<code>+1</code>是因为电影和用户id从1开始，而数组从0开始)</p></li><li><p>根据论文作者说法，电影评分<span class="math inline">\(rating \geq3\)</span>表示用户收藏了这部电影</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">collected_frame = pd.DataFrame(np.zeros((<span class="hljs-built_in">len</span>(movies), <span class="hljs-built_in">len</span>(users))))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(train)):<br>    <span class="hljs-keyword">if</span> train.rating[i] &lt; <span class="hljs-number">3</span>:<br>        <span class="hljs-keyword">continue</span><br>    collected_frame.iloc[train.item_id[i] - <span class="hljs-number">1</span>, train.user_id[i] - <span class="hljs-number">1</span>] = <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><ul><li><code>L</code>是推荐列表长度，用作实验结果的x轴</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">L = np.floor(np.linspace(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(movies) + <span class="hljs-number">1</span>, <span class="hljs-built_in">min</span>(<span class="hljs-number">50</span>, <span class="hljs-built_in">len</span>(movies) + <span class="hljs-number">1</span>))).astype(<span class="hljs-built_in">int</span>)<br></code></pre></td></tr></table></figure></li><li><p>GRM算法推荐</p><ol type="1"><li>GRM算法是将所有电影计算受欢迎程度，也就是有多少人收藏了这部电影，然后根据这个值从高到低进行推荐</li><li>创建一个长度为<code>n</code>的数组，用于存放每个电影的受欢迎程度</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#collected_frame.sum(axis=&#x27;columns&#x27;) # 将collected_frame按列求和（每一行的值加一块作为这一行的受欢迎程度）</span><br>grm_frame_sorted = collected_frame.loc[collected_frame.<span class="hljs-built_in">sum</span>(axis=<span class="hljs-string">&#x27;columns&#x27;</span>).sort_values(ascending=<span class="hljs-literal">False</span>).index, :] <span class="hljs-comment"># 将预处理后得到的collected_frame根据受欢迎程度从高到低排序</span><br></code></pre></td></tr></table></figure><ol start="3" type="1"><li>实现算法</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">grm</span>(<span class="hljs-params">user_id: <span class="hljs-built_in">int</span>, L: <span class="hljs-built_in">int</span> = <span class="hljs-number">5</span></span>) -&gt; <span class="hljs-built_in">list</span>[<span class="hljs-built_in">int</span>]:<br>    res = []<br>    i = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">len</span>(res) &lt; L <span class="hljs-keyword">and</span> i &lt; <span class="hljs-built_in">len</span>(grm_frame_sorted)):     <span class="hljs-comment"># 保证L个推荐，i表示当前遍历到的电影</span><br>        row = grm_frame_sorted.iloc[i]<br>        <span class="hljs-keyword">if</span> row.iloc[user_id - <span class="hljs-number">1</span>] != <span class="hljs-number">1</span>:                      <span class="hljs-comment"># 如果用户没有看过该电影</span><br>            res.append(grm_frame_sorted.index[i] + <span class="hljs-number">1</span>)       <span class="hljs-comment"># 添加到推荐列表中</span><br>        i += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> res<br></code></pre></td></tr></table></figure></li><li><p>CF算法推荐</p><ol type="1"><li><p>CF算法是找最相似的人收集的电影</p></li><li><p>使用一个<span class="math inline">\(m\timesm\)</span>的表<code>similar_martix</code>存放用户间的相似度，其中<code>similar_martix[i-1][j-1]</code>表示用户<code>i</code>和用户<code>j</code>之间的相似度。</p><p>用户间相似度计算<code>similar_martix[i-1][j-1]</code>=<spanclass="math inline">\(s_{ij} =\frac{\sum_{l=1}^na_{li}a_{lj}}{min\{k(u_i), k(u_j)\}}\)</span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">similar_martix = np.zeros((<span class="hljs-built_in">len</span>(users), <span class="hljs-built_in">len</span>(users)))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(users)):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(users)):<br>        <span class="hljs-keyword">if</span> j &lt;= i: <span class="hljs-comment"># 矩阵是对称的，算一半就行。i==j时设为0，因为下一步公式中要求l≠i</span><br>            <span class="hljs-keyword">continue</span><br>        d = <span class="hljs-built_in">min</span>(collected_frame.loc[:, i].<span class="hljs-built_in">sum</span>(), collected_frame.loc[:, j].<span class="hljs-built_in">sum</span>()) <span class="hljs-comment"># 这是公式的分母部分</span><br>        <span class="hljs-keyword">if</span> d == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-comment"># similar_martix[i, j] = sum([collected_frame.loc[l, i] * collected_frame.loc[l, j] for l in range(len(movies))]) / d</span><br>        similar_martix[i,j] = collected_frame.loc[:,i].T.dot(collected_frame.loc[:,j]) / d <span class="hljs-comment"># 使用矩阵运算代替上面注释掉的计算，可以提高运行速度</span><br>        similar_martix[j, i] = similar_martix[i, j] <span class="hljs-comment"># 矩阵是对称的</span><br></code></pre></td></tr></table></figure><p>公式中分子部分的<spanclass="math inline">\(\sum_{l=1}^na_{li}a_{lj}\)</span>表示用户<code>i</code>和用户<code>j</code>同时收集的电影的个数，只有两个都收集时才会使<spanclass="math inline">\(a_{li}a_{lj}=1\)</span></p></li><li><p>计算对象预测得分</p><p>这里用函数<code>cf_value</code>来计算对象的预测得分<spanclass="math inline">\(v_{ij}\)</span></p><p><span class="math inline">\(v_{ij} = \frac{\sum_{l=1,l \neq i}^ms_{li}a_{jl}}{\sum_{l=1,l\neq i}^ms_{li}}\)</span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">cf_value</span>(<span class="hljs-params">i,j</span>):<br>  <span class="hljs-comment"># 由于上一步similar_martix中对角线部分值为0，所以可以直接点乘，不用担心l≠i的要求</span><br>  n = np.dot(similar_martix[i-<span class="hljs-number">1</span>], collected_frame.iloc[j-<span class="hljs-number">1</span>])<br>  d = np.<span class="hljs-built_in">sum</span>(similar_martix[i-<span class="hljs-number">1</span>])<br>  <span class="hljs-keyword">if</span> d == <span class="hljs-number">0</span>:<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>  <span class="hljs-keyword">else</span>:<br>      <span class="hljs-keyword">return</span> n / d<br></code></pre></td></tr></table></figure></li><li><p>实现算法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">cf</span>(<span class="hljs-params">user_id: <span class="hljs-built_in">int</span>, L: <span class="hljs-built_in">int</span> = <span class="hljs-number">5</span></span>) -&gt; <span class="hljs-built_in">list</span>[<span class="hljs-built_in">int</span>]:<br>    <span class="hljs-comment"># 对象的分表，计算每个对象对于被推荐用户的得分</span><br>    v_set = np.array([cf_value(user_id, j) <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(movies) + <span class="hljs-number">1</span>)])<br>    <span class="hljs-comment"># 用户已经收集的对象</span><br>    collected = collected_frame.loc[:, user_id - <span class="hljs-number">1</span>].where(<span class="hljs-keyword">lambda</span> x: x == <span class="hljs-number">1</span>).dropna().index.to_numpy()<br>    <span class="hljs-comment"># 将得分表中已经收集的对象的值设为-1</span><br>    v_set[collected] = -<span class="hljs-number">1</span><br>    <span class="hljs-comment"># 排序后已经收集的对象一定在最后</span><br>    v_set = np.argsort(-v_set)<br>    <span class="hljs-comment"># 将列表最后已收集的对象去除</span><br>    v_set = v_set[:-<span class="hljs-number">1</span> * <span class="hljs-built_in">len</span>(collected)]<br>    <span class="hljs-comment"># 转化为对象的id</span><br>    v_set += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> v_set[:L]<br></code></pre></td></tr></table></figure></li></ol></li><li><p>NBI算法推荐</p><ol type="1"><li><p>利用二分网络计算相似度进行推荐</p></li><li><p>假设被推荐用户的ID为<code>u</code></p></li><li><p>先找到所有<code>u</code>所收集的对象<code>u_neighbors</code>,并赋值<code>1</code>。这里代码实现使用<code>f_o_initial</code>记录<code>u_neighbors</code>获得的值</p></li><li><p>将对象的值均分给收集此对象的用户</p><ol type="1"><li>对于节点<code>i</code>,将节点的资源(上一步被赋的值)均分给连接的User节点，也就是<spanclass="math inline">\(被连接的节点资源 +=\frac{i的资源}{i的度}\)</span>​</li></ol></li><li><p>将用户的资源再以同样的方式分给对象</p></li><li><p>将对象按所获得的资源量进行排序，去除用户已关联的对象后给出推荐列表</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">nbi</span>(<span class="hljs-params">G, user_id: <span class="hljs-built_in">int</span>, u_num: <span class="hljs-built_in">int</span> = <span class="hljs-number">983</span>, o_num: <span class="hljs-built_in">int</span> = <span class="hljs-number">1682</span></span>)-&gt;<span class="hljs-built_in">list</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    计算指定用户user_id的推荐列表</span><br><span class="hljs-string">    :param G:       用户-物品二分图</span><br><span class="hljs-string">    :param user_id: 用户ID</span><br><span class="hljs-string">    :param u_num:   总用户数</span><br><span class="hljs-string">    :param o_num:   总物品数</span><br><span class="hljs-string">    :return:        推荐物品列表</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    f_o_initial = np.zeros(o_num)   <span class="hljs-comment"># 存放Object开始时的资源</span><br>    f_u = np.zeros(u_num)           <span class="hljs-comment"># 存放Object转到Users时的资源</span><br>    f_o = np.zeros(o_num)           <span class="hljs-comment"># 存放Users转到Objects时的资源，也是最终的推荐列表</span><br><br>    <span class="hljs-comment"># 初始化Object的资源，将被推荐用户所关联的资源全部赋值为1</span><br>    u_neighbors = np.array(<span class="hljs-built_in">list</span>(G.neighbors(user_id))) - u_num - <span class="hljs-number">1</span><br>    f_o_initial[u_neighbors] += <span class="hljs-number">1</span><br><br>    <span class="hljs-comment"># 第一步：资源从Object集到User集O--&gt;U</span><br>    <span class="hljs-keyword">for</span> o, fo <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(f_o_initial):    <span class="hljs-comment"># 这里也可以循环range(u_num+1,u_num+o_num+1)</span><br>        o_node_id = o + u_num + <span class="hljs-number">1</span>           <span class="hljs-comment"># 对象节点id</span><br>        o_degree = G.degree(o_node_id)<br>        <span class="hljs-keyword">if</span> o_degree == <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> fo==<span class="hljs-number">0</span>:          <span class="hljs-comment"># 度为零会导致后边报错，资源为0则没必要计算</span><br>            <span class="hljs-keyword">continue</span><br>        neighbors = np.array(<span class="hljs-built_in">list</span>(G.neighbors(o_node_id))) - <span class="hljs-number">1</span><br>        f_u[neighbors] += fo / o_degree<br><br>    <span class="hljs-comment"># 第二步：资源从User集到Object集U--&gt;O</span><br>    <span class="hljs-keyword">for</span> u, fu <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(f_u):<br>        u_node_id = u + <span class="hljs-number">1</span><br>        u_degree = G.degree(u_node_id)<br>        <span class="hljs-keyword">if</span> u_degree == <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> fu==<span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">continue</span><br>        neighbors = np.array(<span class="hljs-built_in">list</span>(G.neighbors(u_node_id))) - u_num - <span class="hljs-number">1</span>  <span class="hljs-comment"># 因为Object的id排在user后面，所以要多减去u_num</span><br>        f_o[neighbors] += fu / u_degree<br><br>    f_o[u_neighbors] = -<span class="hljs-number">1</span>           <span class="hljs-comment"># 将值设置为-1，下一步排序时就一定会被放在末尾</span><br>    f_o = np.argsort(-f_o)<br>    f_o = f_o[:-<span class="hljs-number">1</span> * <span class="hljs-built_in">len</span>(u_neighbors)]   <span class="hljs-comment"># 去掉末尾的几个(用户已收集的Object)</span><br>    f_o += <span class="hljs-number">1</span>                        <span class="hljs-comment"># 将数组的角标转化为Object的id</span><br>    <span class="hljs-keyword">return</span> f_o<br></code></pre></td></tr></table></figure></li><li><p>计算各参数的代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs python">hitting_rate_cf = np.zeros(<span class="hljs-built_in">len</span>(L))<br>hitting_rate_grm = np.zeros(<span class="hljs-built_in">len</span>(L))<br>hitting_rate_nbi = np.zeros(<span class="hljs-built_in">len</span>(L))<br><br>r_set_cf = np.zeros(<span class="hljs-built_in">len</span>(test))<br>r_set_nbi = np.zeros(<span class="hljs-built_in">len</span>(test))<br>r_set_grm = np.zeros(<span class="hljs-built_in">len</span>(test))<br><br>user_num = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i, (idx, u) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(tqdm(users.iterrows(), total=users.shape[<span class="hljs-number">0</span>])):<br>    <span class="hljs-comment"># print(f&#x27;当前计算用户：&#123;u.user_id&#125;&#x27;)</span><br>    test_list = test.where((test.user_id == u.user_id) &amp; (test.rating &gt;= <span class="hljs-number">3</span>)).dropna()<br>    true_list = <span class="hljs-built_in">set</span>(test_list.item_id.tolist())<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(test_list) == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">continue</span><br>    forecast_grm = grm(u.user_id, L=<span class="hljs-built_in">max</span>(L))<br>    forecast_cf = cf(u.user_id, L=<span class="hljs-built_in">max</span>(L))<br>    forecast_nbi = nbi(G, u.user_id, u_num=<span class="hljs-built_in">len</span>(users), o_num=<span class="hljs-built_in">len</span>(movies))<br>    <span class="hljs-keyword">for</span> il <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(L)):<br>        tmp_forecast_grm = forecast_grm[:L[il]]<br>        tmp_forecast_cf = forecast_cf[:L[il]]<br>        tmp_forecast_nbi = forecast_nbi[:L[il]]<br>        hit_grm = <span class="hljs-built_in">len</span>(<span class="hljs-built_in">set</span>(tmp_forecast_grm).intersection(true_list)) / <span class="hljs-built_in">len</span>(true_list)<br>        hit_cf = <span class="hljs-built_in">len</span>(<span class="hljs-built_in">set</span>(tmp_forecast_cf).intersection(true_list)) / <span class="hljs-built_in">len</span>(true_list)<br>        hit_nbi = <span class="hljs-built_in">len</span>(<span class="hljs-built_in">set</span>(tmp_forecast_nbi).intersection(true_list)) / <span class="hljs-built_in">len</span>(true_list)<br>        hitting_rate_grm[il] += hit_grm<br>        hitting_rate_cf[il] += hit_cf<br>        hitting_rate_nbi[il] += hit_nbi<br>    <br>    forecast_grm = <span class="hljs-built_in">list</span>(forecast_grm)<br>    forecast_cf = <span class="hljs-built_in">list</span>(forecast_cf)<br>    forecast_nbi = <span class="hljs-built_in">list</span>(forecast_nbi)<br>    <span class="hljs-keyword">for</span> j, t <span class="hljs-keyword">in</span> test_list.iterrows():<br>        <span class="hljs-keyword">if</span> t.rating &lt; <span class="hljs-number">3</span>:<br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">try</span>:<br>            positions_grm = forecast_grm.index(t.item_id) + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">except</span> ValueError:<br>            positions_grm = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">try</span>:<br>            positions_cf = forecast_cf.index(t.item_id) + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">except</span> ValueError:<br>            positions_cf = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">try</span>:<br>            positions_nbi = forecast_nbi.index(t.item_id) + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">except</span> ValueError:<br>            positions_nbi = <span class="hljs-number">0</span><br>        r_set_grm[j] = positions_grm / <span class="hljs-built_in">len</span>(forecast_grm)<br>        r_set_cf[j] = positions_cf / <span class="hljs-built_in">len</span>(forecast_cf)<br>        r_set_nbi[j] = positions_nbi / <span class="hljs-built_in">len</span>(forecast_nbi)<br><br>    user_num += <span class="hljs-number">1</span><br>nonzero_count = test.where(test.rating &gt;= <span class="hljs-number">3</span>).count()[<span class="hljs-string">&#x27;user_id&#x27;</span>]<br>r_set_grm = np.sort(r_set_grm)<br>r_average_grm = np.<span class="hljs-built_in">sum</span>(r_set_grm) / nonzero_count<br>r_set_cf = np.sort(r_set_cf)<br>r_average_cf = np.<span class="hljs-built_in">sum</span>(r_set_cf) / nonzero_count<br>r_set_nbi = np.sort(r_set_nbi)<br>r_average_nbi = np.<span class="hljs-built_in">sum</span>(r_set_nbi) / nonzero_count<br>hitting_rate_grm /= user_num<br>hitting_rate_cf /= user_num<br>hitting_rate_nbi /= user_num<br></code></pre></td></tr></table></figure></li><li><p>三种算法的对比结果图</p><figure><imgsrc="https://cdn.jsdelivr.net/gh/tippye/PicCloud@master/uPic/2024/05/18/image-20240518030432196.png"alt="image-20240518030432196" /><figcaption aria-hidden="true">image-20240518030432196</figcaption></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">plt.plot(L, hitting_rate_grm, color=<span class="hljs-string">&#x27;black&#x27;</span>, label=<span class="hljs-string">&#x27;GRM&#x27;</span>)<br>plt.plot(L, hitting_rate_cf, color=<span class="hljs-string">&#x27;blue&#x27;</span>, label=<span class="hljs-string">&#x27;CF&#x27;</span>, linestyle=<span class="hljs-string">&#x27;--&#x27;</span>)<br>plt.plot(L, hitting_rate_nbi, color=<span class="hljs-string">&#x27;red&#x27;</span>, label=<span class="hljs-string">&#x27;nbi&#x27;</span>, linestyle=<span class="hljs-string">&#x27;-.&#x27;</span>)<br>plt.legend([<span class="hljs-string">&#x27;GRM&#x27;</span>, <span class="hljs-string">&#x27;CF&#x27;</span>, <span class="hljs-string">&#x27;nbi&#x27;</span>])<br>plt.title(<span class="hljs-string">&#x27;The hitting rate as a function of the length of recommendation list&#x27;</span>)<br>plt.xlabel(<span class="hljs-string">&#x27;推荐列表长度&#x27;</span>)<br>plt.ylabel(<span class="hljs-string">&#x27;命中率&#x27;</span>)<br>plt.savefig(<span class="hljs-string">&#x27;recommend_functions.png&#x27;</span>,dpi=<span class="hljs-number">300</span>)<br></code></pre></td></tr></table></figure></li><li><p>The predicted position of each entry in the probe ranked in theascending order(按升序排列的探测器中每个条目的预测位置)</p><figure><imgsrc="https://cdn.jsdelivr.net/gh/tippye/PicCloud@master/uPic/2024/05/19/image-20240519091310934.png"alt="image-20240519091310934" /><figcaption aria-hidden="true">image-20240519091310934</figcaption></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">plt.plot(<span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(test)), r_set_grm, label=<span class="hljs-string">f&#x27;GRM &lt;r&gt;=<span class="hljs-subst">&#123;r_average_grm:<span class="hljs-number">.3</span>f&#125;</span>&#x27;</span>)<br>plt.plot(<span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(test)), r_set_cf, label=<span class="hljs-string">f&#x27;CF &lt;r&gt;=<span class="hljs-subst">&#123;r_average_cf:<span class="hljs-number">.3</span>f&#125;</span>&#x27;</span>)<br>plt.plot(<span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(test)), r_set_nbi, label=<span class="hljs-string">f&#x27;NBI &lt;r&gt;=<span class="hljs-subst">&#123;r_average_nbi:<span class="hljs-number">.3</span>f&#125;</span>&#x27;</span>)<br>plt.legend([<span class="hljs-string">f&#x27;GRM &lt;r&gt;=<span class="hljs-subst">&#123;r_average_grm:<span class="hljs-number">.3</span>f&#125;</span>&#x27;</span>, <span class="hljs-string">f&#x27;CF &lt;r&gt;=<span class="hljs-subst">&#123;r_average_cf:<span class="hljs-number">.3</span>f&#125;</span>&#x27;</span>, <span class="hljs-string">f&#x27;NBI &lt;r&gt;=<span class="hljs-subst">&#123;r_average_nbi:<span class="hljs-number">.3</span>f&#125;</span>&#x27;</span>])<br>plt.title(<span class="hljs-string">&#x27;The predicted position of each entry in the probe ranked in the ascending order&#x27;</span>)<br>plt.xlabel(<span class="hljs-string">&#x27;range(len(test))&#x27;</span>)<br>plt.ylabel(<span class="hljs-string">&#x27;r&#x27;</span>)<br>plt.show()<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>论文精读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>复杂网络</tag>
      
      <tag>NLP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BA模型与幂绿度分布</title>
    <link href="/2024/05/17/BA%E6%A8%A1%E5%9E%8B%E4%B8%8E%E5%B9%82%E7%BB%BF%E5%BA%A6%E5%88%86%E5%B8%83/"/>
    <url>/2024/05/17/BA%E6%A8%A1%E5%9E%8B%E4%B8%8E%E5%B9%82%E7%BB%BF%E5%BA%A6%E5%88%86%E5%B8%83/</url>
    
    <content type="html"><![CDATA[<h1 id="ba无标度网络模型">BA无标度网络模型</h1><h2 id="ba无标度网络模型构造算法">BA无标度网络模型构造算法</h2><ol type="1"><li><p>增长:从一个具有<spanclass="math inline">\(m_0\)</span>个节点的连通网络开始,每次引人一个新的节点并且连到<spanclass="math inline">\(m\)</span>个已存在的节点上,这里<spanclass="math inline">\(m \le m_0\)</span>。</p></li><li><p>优先连接:一个新节点与一个已经存在的节点<spanclass="math inline">\(i\)</span>相连接的概率<spanclass="math inline">\(\prod_i\)</span>,与节点<spanclass="math inline">\(i\)</span>的度<spanclass="math inline">\(k_i\)</span>,之间满足如下关系: <spanclass="math inline">\(\prod_i = \frac{k_i}{\sum_jk_j}\)</span>​</p></li></ol><h2 id="ba无标度网络的实现">BA无标度网络的实现</h2><ol type="1"><li>先使用<code>networkx</code>库创建一个有<spanclass="math inline">\(m_0\)</span>个节点的完全图</li><li>循环添加节点直到图的节点到<span class="math inline">\(N\)</span>个<ol type="1"><li>计算选择每个节点的概率：这里使用<code>random.choice</code>在<code>tmp_nodes</code>进行选择。对于<code>tmp_nodes</code>，假设节点<code>i</code>的度为<code>ki</code>,则往<code>tmp_nodes</code>中添加<code>ki</code>个<code>i</code>,最后选择到<code>i</code>的概率即可变为<spanclass="math inline">\(\frac{k_i}{\sum_jk_j}\)</span>。对应代码为<code>tmp_nodes = [node for node, degree in self.G.degree() for _ in range(degree)]</code></li><li>选择<spanclass="math inline">\(m\)</span>个节点，因为上一步随机选择可能包括重复的节点，所以要使用<code>set</code>去重后重新选择直到选出来<spanclass="math inline">\(m\)</span>个不重复的节点</li><li>将新选择出来的<spanclass="math inline">\(m\)</span>个节点与新节点连接，被选择的节点度都会<spanclass="math inline">\(+1\)</span>，所以为了下一次新增节点，将这<spanclass="math inline">\(m\)</span>个节点添加到<code>tmp_nodes</code>。新节点的度肯定为<spanclass="math inline">\(m\)</span>，所以往<code>tmp_nodes</code>添加<spanclass="math inline">\(m\)</span>​个新节点</li></ol></li><li>到此就实现了一个BA无标度网络</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">BAGraph</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, m0, N, m</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        构建BA模型</span><br><span class="hljs-string">        </span><br><span class="hljs-string">        :param m0: 初始有几个节点</span><br><span class="hljs-string">        :param N:  一共有几个节点</span><br><span class="hljs-string">        :param m:  每次选几个节点</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">assert</span> m &gt;= m0, <span class="hljs-string">&#x27;m0必须小于m&#x27;</span><br>        <span class="hljs-keyword">assert</span> N &gt;= m0, <span class="hljs-string">&#x27;N必须大于m0&#x27;</span><br>        self.m0 = m0<br>        self.N = N<br>        self.m = m<br>        self.G = nx.complete_graph(m0)<br>        self.pk = <span class="hljs-literal">None</span><br>        self.h = <span class="hljs-literal">None</span><br><br>        <span class="hljs-comment"># 当前节点数</span><br>        n = m0<br>        <span class="hljs-comment"># 每个节点的度为多少就放几个对应节点，这样可以等价于计算度的概率</span><br>        tmp_nodes = [node <span class="hljs-keyword">for</span> node, degree <span class="hljs-keyword">in</span> self.G.degree() <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(degree)]<br>        <span class="hljs-keyword">while</span> n &lt; N:<br>            new_node = n<br>            self.G.add_node(new_node)<br><br>            <span class="hljs-comment"># 选择m个不重复的节点</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(tmp_nodes) == <span class="hljs-number">0</span>:<br>                <span class="hljs-comment"># m0=1时，第一次tmp_nodes会为空，手动设置choice_nodes放0号节点，否则random.choices会报错</span><br>                choice_nodes = <span class="hljs-built_in">set</span>([<span class="hljs-number">0</span>])<br>            <span class="hljs-keyword">else</span>:<br>                choice_nodes = <span class="hljs-built_in">set</span>(random.choices(tmp_nodes, k=m))<br>            <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(choice_nodes) &lt; m:<br>                choice_nodes.add(random.choice(tmp_nodes))<br><br>            <span class="hljs-keyword">for</span> node <span class="hljs-keyword">in</span> choice_nodes:<br>                self.G.add_edge(new_node, node)<br><br>            tmp_nodes.extend(choice_nodes)<br>            tmp_nodes.extend([new_node] * <span class="hljs-built_in">len</span>(choice_nodes))<br><br>            n += <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_pk</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        计算度分布</span><br><span class="hljs-string">        </span><br><span class="hljs-string">        :return:</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> self.pk <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            pk = np.zeros(self.N)<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(self.N):<br>                pk[self.G.degree[i]] += <span class="hljs-number">1</span><br>            self.pk = pk / self.N<br>        <span class="hljs-keyword">return</span> self.pk<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_h</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        计算幂律分布</span><br><span class="hljs-string">        </span><br><span class="hljs-string">        $h = \\\\frac&#123;pk&#125;&#123;2*m^2&#125;$</span><br><span class="hljs-string">        :return:</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> self.h <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            pk = self.get_pk()<br>            self.h = pk / (<span class="hljs-number">2</span> * self.m ** <span class="hljs-number">2</span>)<br>        <span class="hljs-keyword">return</span> self.h<br></code></pre></td></tr></table></figure><figure><imgsrc="https://cdn.jsdelivr.net/gh/tippye/PicCloud@master/uPic/2024/05/03/image-20240503162714960.png"alt="BA模型的演化" /><figcaption aria-hidden="true">BA模型的演化</figcaption></figure><h1 id="幂律度分布">幂律度分布</h1><ul><li><p>BA模型具有幂律度分布且与参数<spanclass="math inline">\(m\)</span>无关。下图显示的是双对数坐标下,包含<spanclass="math inline">\(N=t+m_0=300 000\)</span>个节点的BA网络的度分布<span class="math inline">\(P(k)\)</span>,并分别考虑4个不同的<spanclass="math inline">\(m\)</span>值。图中的虚线对应的是斜率为<spanclass="math inline">\(-2.9\)</span>的直线,而四种情形的度分布都可以用幂指数<spanclass="math inline">\(\gamma_{BA} =2.9士0.1\)</span>的幂律分布来表示。</p><figure><imgsrc="https://cdn.jsdelivr.net/gh/tippye/PicCloud@master/uPic/2024/05/17/image-20240517134936555.png"alt="不同m值情形的BA模型的度分布" /><figcaption aria-hidden="true">不同m值情形的BA模型的度分布</figcaption></figure><p>上述实现代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python">N = <span class="hljs-number">30000</span>               <span class="hljs-comment"># 设置图的总结点数，书上给的是30w，这里为了运行时间使用了3w</span><br>sample = <span class="hljs-number">100</span>            <span class="hljs-comment"># 样本数，对于每个m值，运行处100个图然后去均值作为度分布</span><br>m_list = [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>]   <span class="hljs-comment"># 不同的m值</span><br>PK = np.zeros(<span class="hljs-built_in">len</span>(m_list) * N).reshape(<span class="hljs-built_in">len</span>(m_list), N)<span class="hljs-comment"># 用于存放度分布结果，因为有4个m值所以有4行，每行的长度为总节点数（度的取值范围为1～N)</span><br>H = np.zeros(<span class="hljs-built_in">len</span>(m_list) * N).reshape(<span class="hljs-built_in">len</span>(m_list), N)<span class="hljs-comment"># 用于存放幂律度分布结果</span><br><span class="hljs-keyword">with</span> tqdm(total=sample * <span class="hljs-built_in">len</span>(m_list)) <span class="hljs-keyword">as</span> pbar:<br>    <span class="hljs-keyword">for</span> i, m <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(m_list):<br>        <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(sample):<br>            G = BAGraph(m0=m, N=N, m=m)<br>            PK[i] += G.get_pk()<br>            H[i] += G.get_h()<br>            pbar.update(<span class="hljs-number">1</span>)<br>        PK[i] /= sample<br>        H[i] /= sample<br><br><span class="hljs-comment"># 后面是作图</span><br>plt.figure(figsize=(<span class="hljs-number">8</span>, <span class="hljs-number">16</span>))<br>plt.title(<span class="hljs-string">&quot;不同m值情形的BA模型的度分布&quot;</span>)<br>color_list = [<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>, <span class="hljs-string">&#x27;orange&#x27;</span>]<br><span class="hljs-keyword">for</span> i, m <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(m_list):<br>    plt.scatter(<span class="hljs-built_in">range</span>(N), PK[i], s=<span class="hljs-number">10</span>, label=<span class="hljs-string">f&#x27;m=<span class="hljs-subst">&#123;m&#125;</span>&#x27;</span>, color=color_list[i])<br>plt.xlabel(<span class="hljs-string">&#x27;$k$&#x27;</span>)<br>plt.xscale(<span class="hljs-string">&#x27;log&#x27;</span>)<br>plt.ylabel(<span class="hljs-string">&#x27;$P(k)$&#x27;</span>)<br>plt.yscale(<span class="hljs-string">&#x27;log&#x27;</span>)<br>plt.legend(loc=<span class="hljs-string">&#x27;lower right&#x27;</span>)<br><br>ax = plt.axes([<span class="hljs-number">0.6</span>, <span class="hljs-number">0.58</span>, <span class="hljs-number">0.3</span>, <span class="hljs-number">0.3</span>])<br>plt.title(<span class="hljs-string">&quot;不同m值情形的BA模型的幂律度分布&quot;</span>)<br><span class="hljs-keyword">for</span> i, k <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(m_list):<br>    ax.scatter(<span class="hljs-built_in">range</span>(N), H[i], s=<span class="hljs-number">10</span>, label=<span class="hljs-string">f&#x27;m=<span class="hljs-subst">&#123;k&#125;</span>&#x27;</span>,color=color_list[i])<br>    <br>ax.plot(<span class="hljs-built_in">range</span>(N), np.power(np.arange(N).astype(<span class="hljs-built_in">float</span>), -<span class="hljs-number">3</span>), label=<span class="hljs-string">&#x27;$k^&#123;-3&#125;$&#x27;</span>, color=<span class="hljs-string">&#x27;red&#x27;</span>, linestyle=<span class="hljs-string">&#x27;--&#x27;</span>)<br>ax.legend(loc=<span class="hljs-string">&#x27;upper right&#x27;</span>)<br>ax.<span class="hljs-built_in">set</span>(ylabel=<span class="hljs-string">&#x27;$p(k)/2m^2$&#x27;</span>, xlabel=<span class="hljs-string">&#x27;$k$&#x27;</span>, yscale=<span class="hljs-string">&#x27;log&#x27;</span>, xscale=<span class="hljs-string">&#x27;log&#x27;</span>)<br><br>plt.savefig(<span class="hljs-string">&#x27;不同m的幂律度分布图.png&#x27;</span>, dpi=<span class="hljs-number">300</span>)<br></code></pre></td></tr></table></figure></li><li><p>BA 模型具有幂律度分布且与网络规模<spanclass="math inline">\(N\)</span>无关。下图显示的是固定<spanclass="math inline">\(m=m_0=5\)</span>时BA模型的度分布<spanclass="math inline">\(P(k)\)</span>，网络规模分别为：N=100 000、150000及200 000。</p><figure><imgsrc="https://cdn.jsdelivr.net/gh/tippye/PicCloud@master/uPic/2024/05/17/image-20240517135929909.png"alt="不同N值情形的BA模型的度分布(m=5)" /><figcaptionaria-hidden="true">不同N值情形的BA模型的度分布(m=5)</figcaption></figure><p>实现代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python">N_list = [<span class="hljs-number">100000</span>,<span class="hljs-number">150000</span>,<span class="hljs-number">200000</span>]<span class="hljs-comment"># 不同N值列表</span><br>m = <span class="hljs-number">5</span><span class="hljs-comment"># 固定m值</span><br>PK = [np.zeros(n) <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> N_list]<br>H = PK.copy()<br><span class="hljs-keyword">with</span> tqdm(total=sample * <span class="hljs-built_in">len</span>(N_list)) <span class="hljs-keyword">as</span> pbar:<br>    <span class="hljs-keyword">for</span> i, n <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(N_list):<br>        <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(sample):<br>            G = BAGraph(m0=m, N=n, m=m)<br>            PK[i] += G.get_pk()<br>            H[i] += G.get_h()<br>            pbar.update(<span class="hljs-number">1</span>)<br>        PK[i] /= sample<br>        H[i] /= sample<br>        <br>plt.figure(figsize=(<span class="hljs-number">8</span>, <span class="hljs-number">16</span>))<br>plt.title(<span class="hljs-string">f&quot;不同N值情形的BA模型的度分布(m=<span class="hljs-subst">&#123;m&#125;</span>)&quot;</span>)<br>color_list = [<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>, <span class="hljs-string">&#x27;orange&#x27;</span>]<br><span class="hljs-keyword">for</span> i, n <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(N_list):<br>    plt.scatter(<span class="hljs-built_in">range</span>(n), PK[i], s=<span class="hljs-number">10</span>, label=<span class="hljs-string">f&#x27;n=<span class="hljs-subst">&#123;n&#125;</span>&#x27;</span>, color=color_list[i])<br>plt.xlabel(<span class="hljs-string">&#x27;$k$&#x27;</span>)<br>plt.xscale(<span class="hljs-string">&#x27;log&#x27;</span>)<br>plt.ylabel(<span class="hljs-string">&#x27;$P(k)$&#x27;</span>)<br>plt.yscale(<span class="hljs-string">&#x27;log&#x27;</span>)<br>plt.legend(loc=<span class="hljs-string">&#x27;lower right&#x27;</span>)<br></code></pre></td></tr></table></figure></li><li><p>度分布计算函数和幂律度分布计算函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">BAGraph</span>:<br>    ...<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_pk</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        计算度分布</span><br><span class="hljs-string">        </span><br><span class="hljs-string">        :return:</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-comment"># 度分布即为统计每个度的节点占总节点的分数。</span><br>        <span class="hljs-keyword">if</span> self.pk <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            pk = np.zeros(self.N)<span class="hljs-comment"># 度的取值范围只能是1～N，不取零是因为BA模型肯定是连通图</span><br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(self.N):<span class="hljs-comment"># 遍历每个节点，将pk作为哈希表</span><br>                pk[self.G.degree[i]] += <span class="hljs-number">1</span><br>            self.pk = pk / self.N<span class="hljs-comment"># 计算出pk后要统一除以节点总数才为度分布的概率</span><br>        <span class="hljs-keyword">return</span> self.pk<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_h</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        计算幂律分布</span><br><span class="hljs-string">        </span><br><span class="hljs-string">        $h = \\\\frac&#123;pk&#125;&#123;2*m^2&#125;$</span><br><span class="hljs-string">        :return:</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> self.h <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            pk = self.get_pk()<br>            self.h = pk / (<span class="hljs-number">2</span> * self.m ** <span class="hljs-number">2</span>)<span class="hljs-comment"># 参考《网络科学导论》，幂律度分布为度分布/2m^2</span><br>        <span class="hljs-keyword">return</span> self.h<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>复杂网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何读一篇论文</title>
    <link href="/2024/05/09/%E5%A6%82%E4%BD%95%E8%AF%BB%E4%B8%80%E7%AF%87%E8%AE%BA%E6%96%87/"/>
    <url>/2024/05/09/%E5%A6%82%E4%BD%95%E8%AF%BB%E4%B8%80%E7%AF%87%E8%AE%BA%E6%96%87/</url>
    
    <content type="html"><![CDATA[<h2 id="如何读一篇论文">如何读一篇论文</h2><ol type="1"><li>第一遍：标题、摘要、结论。可以看一看方法和实验部分重要的图和表。这样可以花费十几分钟时间了解到论文是否适合你的研究方向。<ul><li>第一遍读论文的时候，需要去关注标题和摘要</li><li>读完摘要之后，直接跳到结论这边</li><li>读完这三个部分，大致就知道这篇论文是在讲什么东西了</li></ul></li><li>第二遍：确定论文值得读之后，可以快速的把整个论文过一遍，不需要知道所有的细节，需要了解重要的图和表，知道每一个部分在干什么，圈出相关文献。觉得文章太难，可以读引用的文献。<ul><li>第二遍阅读的时候，最重要是搞明白那些重要的图和表，都要知道他每一个字在干什么事情，作者提出的方法和别人提出的方法是怎么进行对比的？之间差距有多大？这个时候可能你还没有特别搞懂他在干什么。但是不要紧，你可以将不懂的地方标记下来，留到之后第三遍进行阅读</li><li>达到的效果<ul><li>第二遍阅读完之后，你就对整个论文的各个部分，都有一个大概的了解，中间可以把作者引用的别人的相关文献圈出来，比如作者是在某某某的方法上进行了改进，做了哪些改进之类的。这里需要注意的是，如果你发现作者引用的这些重要文献是你没有读过的，那么你需要把它圈出来，作为你的稍后阅读清单</li></ul></li><li>对后续的影响<ul><li>这一遍阅读之后，你需要再继续思考一下这篇论文的质量以及和自己研究方向的契合程度，决定一下自己要不要进行第三遍的完完全全彻底的精读</li></ul></li></ul></li><li>第三遍：提出什么问题，用什么方法来解决这个问题。实验是怎么做的。合上文章，回忆每一个部分在讲什么。<ul><li>第三遍是最后一遍了，也是最详细的一遍，这里就需要自己知道每一句话在干什么，每一段在说什么</li><li>一边读，可以一边在脑子里面思考一些问题：<ul><li>比如说，如果要是我来写这篇文章，我会如何组织这个结构？</li><li>读实验部分的时候，可以思考一下，作者是如何描述自己的实验的，你可以思考，如果换自己来做的话，能不能比作者做得更好？</li><li>这一遍读的时候，一定要明白作者每句话，每个字在说什么，并且最好可以脑补出它整个流程是什么样子的，似乎是自己在做实验，写论文一样。如果有困难的话，可以借助思维导图或者流程图这样的工具，把他的整个流程以可视化的形式展现出来，帮助自己理解。</li></ul></li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>论文精读</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>缓动公式</title>
    <link href="/2024/04/27/%E7%BC%93%E5%8A%A8%E5%85%AC%E5%BC%8F/"/>
    <url>/2024/04/27/%E7%BC%93%E5%8A%A8%E5%85%AC%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="缓动公式">缓动公式</h1><h1 id="一过渡函数">一、过渡函数</h1><ul><li><code>ease</code>规定<strong>慢速</strong>开始，然后<strong>变快</strong>，然后<strong>慢速</strong>结束的过渡效果</li><li><code>ease-in</code> 规定以<strong>慢速开始</strong>的过渡效果</li><li><code>ease-out</code> 规定以<strong>慢速结束</strong>的过渡效果</li><li><code>ease-in-out</code>规定以<strong>慢速开始和结束</strong>的过渡效果</li></ul><h3 id="二参数解析">二、参数解析</h3><p>首先说说四个参数的含义：</p><ul><li>t：timestamp，动画执行到<strong>当前帧所进过的时间</strong></li><li>b：begining，起始值</li><li>c：change，需要变化的量</li><li>d：duration，动画的总时间</li></ul><h3 id="三数学原理">三、数学原理</h3><p>首先要清楚一点，动画中每一帧所经过的<strong>时间是相同的</strong>，只是由于上一帧与下一帧的位移量不同，因此速度在视觉上感受不同，位移量小，感觉上速度就慢了。</p><p>下面简要分析一下原理，一步一步来：</p><ol type="1"><li><p>动画<strong>执行时间</strong>的变化可表达为<code>0 -&gt; d</code>，提取出常数<code>d</code>，就变成<code>d*(0 -&gt; 1)</code>，变化部分为<code>(0-&gt;1)</code>，记为<code>x</code>轴变化</p></li><li><p>动画总的<strong>变化量</strong>和<strong>开始值</strong>是已知的，其变化可以表达为<code>b -&gt; b+c</code>,提取一下变为<code>b+c*(0 -&gt; 1)</code>，变化部分也是<code>(0-&gt;1)</code>，记为<code>y</code>轴变化</p></li><li><p><code>t</code>用来指示事件当前的时间点，将其变为<strong>指示动画完成的百分比</strong>，即<code>t/d</code>；</p></li><li><p>通过上面的变换，我们需要做的事情就是构造<code>x</code>轴区间为<code>[0,1]</code>,<code>y</code>轴区间也为<code>[0,1]</code>的线性或者非线性关系了。线性关系多数是<code>y=x</code>，也就是常用的<code>linear</code>了，非线性复杂一点。</p></li><li><p>然后我们看看可以构造出哪些非线性关系，并给出函数关系表达式：</p><ol type="1"><li><p>利用<strong>指数函数</strong>(<code>x的n次方</code>)可以构造一大堆<code>easein</code>的效果，再根据他们的轴对称或者中心对称做翻转和位移，又可以构造出其对应的<code>easeout</code>效果：</p><p><ahref="https://chenoge.github.io/2018/11/28/缓动公式/1-png.png"><imgsrc="https://chenoge.github.io/2018/11/28/%E7%BC%93%E5%8A%A8%E5%85%AC%E5%BC%8F/1-png.png"alt="img" /></a></p><p><a href="https://chenoge.github.io/2018/11/28/缓动公式/2-1.png"><imgsrc="https://chenoge.github.io/2018/11/28/%E7%BC%93%E5%8A%A8%E5%85%AC%E5%BC%8F/2-1.png"alt="img" /></a></p></li><li><p>利用<strong>平方根</strong>(<code>Math.sqrt</code>)或者<strong>立方根</strong>来实现这种非线性关系：</p><p><a href="https://chenoge.github.io/2018/11/28/缓动公式/3.png"><imgsrc="https://chenoge.github.io/2018/11/28/%E7%BC%93%E5%8A%A8%E5%85%AC%E5%BC%8F/3.png"alt="img" /></a></p></li><li><p><code>sin</code>或者<code>cos</code>函数可以通过调节参数构造两种运动趋势(下面主要给函数表达式):</p><ul><li><code>easein: y = 1-cos(0.5πx)</code></li><li><code>easeout: y = sin(0.5πx)</code></li></ul></li><li><p>通过幂函数或者对数函数：</p><ul><li><code>easein: y = 2^(10x-10) (当x=0时，y=0)</code></li><li><code>easeout: y = 1-2^(-10x) (当x=1时，y=1)</code></li></ul></li><li><p>效果还可以叠加呀，叠加的结果除以2，就能创造弹簧效果了。</p></li></ol></li><li><p>下面来看看缓动公式运用了哪些吧</p><ul><li><code>Sine</code>表示由三角函数实现</li><li><code>Quad</code>是二次方，<code>Cubic</code>是三次方，<code>Quart</code>是四次方，<code>Quint</code>是五次方</li><li><code>Circ</code>是开平方根(<code>Math.sqit</code>)，<code>Expo</code>是幂函数(<code>Math.pow</code>)</li><li><code>Elastic</code>是结合三角函数和开立方根</li><li><code>Back</code>则引入了常数<code>1.70158</code></li></ul></li></ol><h3 id="四代码实现">四、代码实现</h3><p>原理也就差不多分析完了，那么来看看具体实现吧，下面一2次方Quad为例子来实现，其它的都差不多。</p><p>首先是实现<code>easein</code>，函数表达是为：<code>y = x*x</code>，因此实现为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">easeInQuad</span>(<span class="hljs-params">t,b,c,d</span>)&#123;<br>    <span class="hljs-keyword">var</span> x = t/d; <span class="hljs-comment">//x值</span><br>    <span class="hljs-keyword">var</span> y = x*x; <span class="hljs-comment">//y值</span><br>    <span class="hljs-keyword">return</span> b+c*y; <span class="hljs-comment">//套入最初的公式</span><br>&#125;<br></code></pre></td></tr></table></figure><p>然后来看看<code>easeout</code>，函数表达式为：<code>y = -x*x+2*x</code>，因此实现为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">easeOutQuad</span>(<span class="hljs-params">t,b,c,d</span>)&#123;<br>    <span class="hljs-keyword">var</span> x = t/d;         <span class="hljs-comment">//x值</span><br>    <span class="hljs-keyword">var</span> y = -x*x + <span class="hljs-number">2</span>*x;  <span class="hljs-comment">//y值</span><br>    <span class="hljs-keyword">return</span> b+c*y;        <span class="hljs-comment">//套入最初的公式</span><br>&#125;<br></code></pre></td></tr></table></figure><p>下面再看看<code>easeinout</code>的实现，它的实现就是一半的时间用<code>easein</code>走完一半的路程，另一半时间用<code>easeout</code>走完另一半路程，那么我们计算就套用上面两个公式就会非常直观了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">easeInOutQuad</span>(<span class="hljs-params">t,b,c,d</span>)&#123;<br>    <span class="hljs-keyword">if</span>(t&lt;d/<span class="hljs-number">2</span>)&#123; <span class="hljs-comment">//前半段时间</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-title function_">easeInQuad</span>(t,b,c/<span class="hljs-number">2</span>,d/<span class="hljs-number">2</span>);<span class="hljs-comment">//改变量和时间都除以2</span><br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>      <span class="hljs-keyword">var</span> t1 = t-d/<span class="hljs-number">2</span>; <span class="hljs-comment">//注意时间要减去前半段时间</span><br>      <span class="hljs-keyword">var</span> b1 = b + c/<span class="hljs-number">2</span>;<span class="hljs-comment">//初始量要加上前半段已经完成的</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-title function_">easeOutQuad</span>(t1,b1,c/<span class="hljs-number">2</span>,d/<span class="hljs-number">2</span>);<span class="hljs-comment">//改变量和时间都除以2</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><ahref="https://github.com/gdsmith/jquery.easing">jquery.easing.js</a>里面一样是经过代码优化的，不会那么好理解。这里这样写只是为了便于理解，其它的原理都差不多。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 滚动到顶部的缓冲效果</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">backToTop</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> start = <span class="hljs-variable language_">window</span>.<span class="hljs-property">pageYOffset</span>;<br>    <span class="hljs-keyword">let</span> backPosition = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">let</span> duration = <span class="hljs-number">500</span>;<br>    <span class="hljs-keyword">let</span> fps = <span class="hljs-number">16.7</span>;<br>    <span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">let</span> interval = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-keyword">const</span> next = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title function_">easeInOutQuad</span>(fps * i, start, -start, duration));<br>        <span class="hljs-keyword">if</span> (next &lt;= backPosition || fps * i &gt; duration) &#123;<br>            <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">scrollTo</span>(<span class="hljs-number">0</span>, backPosition);<br>            <span class="hljs-built_in">clearInterval</span>(interval);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">scrollTo</span>(<span class="hljs-number">0</span>, next);<br>        &#125;<br>        i++;<br>    &#125;, fps);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>转载于<ahref="https://chenoge.github.io/2018/11/28/缓动公式/">缓动公式</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>大前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>特效</tag>
      
      <tag>转载</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>若依面包屑导航保存表单数据</title>
    <link href="/2022/06/23/%E8%8B%A5%E4%BE%9D%E9%9D%A2%E5%8C%85%E5%B1%91%E5%AF%BC%E8%88%AA%E4%BF%9D%E5%AD%98%E8%A1%A8%E5%8D%95%E6%95%B0%E6%8D%AE/"/>
    <url>/2022/06/23/%E8%8B%A5%E4%BE%9D%E9%9D%A2%E5%8C%85%E5%B1%91%E5%AF%BC%E8%88%AA%E4%BF%9D%E5%AD%98%E8%A1%A8%E5%8D%95%E6%95%B0%E6%8D%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="若依面包屑导航保存表单数据">若依面包屑导航保存表单数据</h1><h2 id="解决的问题">解决的问题</h2><figure><imgsrc="https://cdn.jsdelivr.net/gh/tippye/PicCloud@master/uPic/2022/06/23/bff5d33e-b4aa-4bb5-85aa-b378c5367f28.gif"alt="bff5d33e-b4aa-4bb5-85aa-b378c5367f28" /><figcaptionaria-hidden="true">bff5d33e-b4aa-4bb5-85aa-b378c5367f28</figcaption></figure><p>面包屑并不是类似操作系统的多窗口, 仅仅是把页面的路由数据存起来,作为一个标签展示在页面上, 直接切换的话还是会重新进入对应的页面,这就会导致本来在页面上输入的数据切换标签页后会被清空</p><h2 id="解决方案">解决方案</h2><p>利用<code>Vuex</code>将页面上的数据进行存储,只要浏览器标签页不被关闭或刷新,<code>Vuex</code>的数据就会一直存在,所以:</p><pre><code class="hljs">1. 从标签页1跳转到标签页2之前(组件路由守卫`beforeRouteLeave`),将标签页1中的数据存放到`Vuex`1. 标签页2(或其他标签页)跳转到标签页1时(组件路由守卫`beforeRouteEnter`),从`Vuex`中读取存放的数据,如果有就赋值给`data`中对应的数据</code></pre><blockquote><p>默认都是使用了若依的Vue-Router, 封装好了导航守卫</p></blockquote><h2 id="代码实现">代码实现</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- Tag Page 1 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">      ...,</span><br><span class="language-javascript">      <span class="hljs-comment">// queryParams是用户输入的一些信息</span></span><br><span class="language-javascript">      <span class="hljs-attr">queryParams</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="language-javascript">      ...</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;,</span><br><span class="language-javascript">  <span class="hljs-comment">/**</span></span><br><span class="hljs-comment"><span class="language-javascript">   * 路由跳转到这一页之前会触发下面的方法</span></span><br><span class="hljs-comment"><span class="language-javascript">   * </span></span><br><span class="hljs-comment"><span class="language-javascript">   * <span class="hljs-doctag">@param</span> to当前页的route对象</span></span><br><span class="hljs-comment"><span class="language-javascript">   * <span class="hljs-doctag">@param</span> from上一页的route对象</span></span><br><span class="hljs-comment"><span class="language-javascript">   * <span class="hljs-doctag">@param</span> <span class="hljs-variable">next</span></span></span><br><span class="hljs-comment"><span class="language-javascript">   */</span></span><br><span class="language-javascript">  <span class="hljs-title function_">beforeRouteEnter</span>(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, next</span>) &#123;</span><br><span class="language-javascript">  <span class="hljs-comment">// 这里的vm指当前页的(也就是to所指向的页面)Vue实例(this)</span></span><br><span class="language-javascript">  <span class="hljs-comment">// 因为触发此路由守卫时该页面还未被创建,所以需要由next中的方法去触发</span></span><br><span class="language-javascript">  <span class="hljs-comment">// 具体参考 完整的导航解析流程</span></span><br><span class="language-javascript">    <span class="hljs-title function_">next</span>(<span class="hljs-function"><span class="hljs-params">vm</span> =&gt;</span> &#123;</span><br><span class="language-javascript">      <span class="hljs-comment">// 这里的params对应下面beforeRouteLeave中的params,根据需求自定义格式</span></span><br><span class="language-javascript">      <span class="hljs-keyword">let</span> params = vm.<span class="hljs-property">$store</span>.<span class="hljs-property">state</span>.<span class="hljs-property">tagsView</span>.<span class="hljs-property">viewsParams</span>[to.<span class="hljs-property">fullPath</span>];</span><br><span class="language-javascript">      <span class="hljs-keyword">if</span> (params &amp;&amp; params.<span class="hljs-property">queryParams</span>) vm.<span class="hljs-property">queryParams</span> = params.<span class="hljs-property">queryParams</span></span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript">  &#125;,</span><br><span class="language-javascript">  <span class="hljs-comment">/**</span></span><br><span class="hljs-comment"><span class="language-javascript">   * 此页面路由跳转到其他页面之前会触发下面的方法</span></span><br><span class="hljs-comment"><span class="language-javascript">   * </span></span><br><span class="hljs-comment"><span class="language-javascript">   * <span class="hljs-doctag">@param</span> to下一页的route对象</span></span><br><span class="hljs-comment"><span class="language-javascript">   * <span class="hljs-doctag">@param</span> from当前页的route对象</span></span><br><span class="hljs-comment"><span class="language-javascript">   * <span class="hljs-doctag">@param</span> <span class="hljs-variable">next</span></span></span><br><span class="hljs-comment"><span class="language-javascript">   */</span></span><br><span class="language-javascript">  <span class="hljs-title function_">beforeRouteLeave</span>(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, next</span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-comment">// 将数据存到Vuex中</span></span><br><span class="language-javascript">    <span class="hljs-comment">// params可以根据自己的需求更改内容,只要和beforeRouteEnter中赋值的方法对应上即可</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">dispatch</span>(<span class="hljs-string">&quot;tagsView/addViewParams&quot;</span>, &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">view</span>: <span class="hljs-keyword">from</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">params</span>: &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">queryParams</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParams</span></span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript">    <span class="hljs-comment">// 触发跳转</span></span><br><span class="language-javascript">    <span class="hljs-title function_">next</span>()</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// /src/store/modules/tagsView.js</span><br><br><span class="hljs-keyword">const</span> state = &#123;<br>  <span class="hljs-attr">visitedViews</span>: [],<br>  <span class="hljs-attr">cachedViews</span>: [],<br>  <span class="hljs-comment">//用来保存页面的一些数据，方便面包屑切换时保留数据</span><br>  <span class="hljs-attr">viewsParams</span>: &#123;&#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> mutations = &#123;<br>  <span class="hljs-attr">ADD_VISITED_VIEW</span>: <span class="hljs-function">(<span class="hljs-params">state, view</span>) =&gt;</span> &#123;...&#125;,<br>  <span class="hljs-attr">ADD_CACHED_VIEW</span>: <span class="hljs-function">(<span class="hljs-params">state, view</span>) =&gt;</span> &#123;...&#125;,<br>  <span class="hljs-comment">// 使用页面route对象的fullPath作为索引,防止重复</span><br>  <span class="hljs-attr">ADD_VIEWS_PARAMS</span>: <span class="hljs-function">(<span class="hljs-params">state, &#123;view, params&#125;</span>) =&gt;</span> &#123;<br>    state.<span class="hljs-property">viewsParams</span>[view.<span class="hljs-property">fullPath</span>] = params<br>  &#125;,<br><br>  <span class="hljs-attr">DEL_VISITED_VIEW</span>: <span class="hljs-function">(<span class="hljs-params">state, view</span>) =&gt;</span> &#123;...&#125;,<br>  <span class="hljs-attr">DEL_CACHED_VIEW</span>: <span class="hljs-function">(<span class="hljs-params">state, view</span>) =&gt;</span> &#123;...&#125;,<br>  <span class="hljs-attr">DEL_VIEWS_PARAMS</span>: <span class="hljs-function">(<span class="hljs-params">state, view</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">delete</span> state.<span class="hljs-property">viewsParams</span>[view.<span class="hljs-property">fullPath</span>]<br>  &#125;,<br><br>  <span class="hljs-attr">DEL_OTHERS_VISITED_VIEWS</span>: <span class="hljs-function">(<span class="hljs-params">state, view</span>) =&gt;</span> &#123;...&#125;,<br>  <span class="hljs-attr">DEL_OTHERS_CACHED_VIEWS</span>: <span class="hljs-function">(<span class="hljs-params">state, view</span>) =&gt;</span> &#123;...&#125;,<br>  <span class="hljs-attr">DEL_OTHERS_VIEWS_PARAMS</span>: <span class="hljs-function">(<span class="hljs-params">state, view</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> tempParams = state.<span class="hljs-property">viewsParams</span>[view.<span class="hljs-property">fullPath</span>]<br><br>    state.<span class="hljs-property">viewsParams</span> = &#123;&#125;<br><br>    state.<span class="hljs-property">viewsParams</span>[view.<span class="hljs-property">fullPath</span>] = tempParams<br>  &#125;,<br><br>  <span class="hljs-attr">DEL_ALL_VISITED_VIEWS</span>: <span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> &#123;...&#125;,<br>  <span class="hljs-attr">DEL_ALL_CACHED_VIEWS</span>: <span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> &#123;...&#125;,<br>  <span class="hljs-attr">DEL_ALL_VIEWS_PARAMS</span>: <span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> &#123;<br>    state.<span class="hljs-property">viewsParams</span> = &#123;&#125;<br>  &#125;,<br><br>  <span class="hljs-attr">UPDATE_VISITED_VIEW</span>: <span class="hljs-function">(<span class="hljs-params">state, view</span>) =&gt;</span> &#123;...&#125;,<br><br>  <span class="hljs-attr">DEL_RIGHT_VIEWS</span>: <span class="hljs-function">(<span class="hljs-params">state, view</span>) =&gt;</span> &#123;<br>    ...<br>      <span class="hljs-keyword">if</span> (i &gt; -<span class="hljs-number">1</span>) &#123;<br>        state.<span class="hljs-property">cachedViews</span>.<span class="hljs-title function_">splice</span>(i, <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">delete</span> state.<span class="hljs-property">viewsParams</span>[item.<span class="hljs-property">fullPath</span>]<br>      &#125;<br>    ...<br>  &#125;,<br><br>  <span class="hljs-attr">DEL_LEFT_VIEWS</span>: <span class="hljs-function">(<span class="hljs-params">state, view</span>) =&gt;</span> &#123;<br>    ...<br>      <span class="hljs-keyword">if</span> (i &gt; -<span class="hljs-number">1</span>) &#123;<br>        state.<span class="hljs-property">cachedViews</span>.<span class="hljs-title function_">splice</span>(i, <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">delete</span> state.<span class="hljs-property">viewsParams</span>[item.<span class="hljs-property">fullPath</span>]<br>      &#125;<br>    ...<br>&#125;<br><br><span class="hljs-keyword">const</span> actions = &#123;<br>  <span class="hljs-title function_">addView</span>(<span class="hljs-params">&#123;dispatch&#125;, view</span>) &#123;...&#125;,<br>  <span class="hljs-title function_">addVisitedView</span>(<span class="hljs-params">&#123;commit&#125;, view</span>) &#123;...&#125;,<br>  <span class="hljs-title function_">addCachedView</span>(<span class="hljs-params">&#123;commit&#125;, view</span>) &#123;...&#125;,<br>  <span class="hljs-title function_">addViewParams</span>(<span class="hljs-params">&#123;commit&#125;, data</span>) &#123;<br>    <span class="hljs-title function_">commit</span>(<span class="hljs-string">&quot;ADD_VIEWS_PARAMS&quot;</span>, data)<br>  &#125;,<br><br>  <span class="hljs-title function_">delView</span>(<span class="hljs-params">&#123;dispatch, state&#125;, view</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> &#123;<br>      <span class="hljs-title function_">dispatch</span>(<span class="hljs-string">&#x27;delVisitedView&#x27;</span>, view)<br>      <span class="hljs-title function_">dispatch</span>(<span class="hljs-string">&#x27;delCachedView&#x27;</span>, view)<br>      <span class="hljs-title function_">dispatch</span>(<span class="hljs-string">&#x27;delViewParams&#x27;</span>, view)<br>      <span class="hljs-comment">// dispatch(&#x27;delView&#x27;)</span><br>      <span class="hljs-title function_">resolve</span>(&#123;<br>        <span class="hljs-attr">visitedViews</span>: [...state.<span class="hljs-property">visitedViews</span>],<br>        <span class="hljs-attr">cachedViews</span>: [...state.<span class="hljs-property">cachedViews</span>],<br>        <span class="hljs-attr">viewsParams</span>: &#123;...state.<span class="hljs-property">viewsParams</span>&#125;<br>      &#125;)<br>    &#125;)<br>  &#125;,<br>  <span class="hljs-title function_">delVisitedView</span>(<span class="hljs-params">&#123;commit, state&#125;, view</span>) &#123;...&#125;,<br>  <span class="hljs-title function_">delCachedView</span>(<span class="hljs-params">&#123;commit, state&#125;, view</span>) &#123;...&#125;,<br>  <span class="hljs-title function_">delViewParams</span>(<span class="hljs-params">&#123;commit, state&#125;, view</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> &#123;<br>      <span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;DEL_VIEWS_PARAMS&#x27;</span>,view)<br>      <span class="hljs-title function_">resolve</span>(&#123;...state.<span class="hljs-property">viewsParams</span>&#125;)<br>    &#125;)<br>  &#125;,<br><br>  <span class="hljs-title function_">delOthersViews</span>(<span class="hljs-params">&#123;dispatch, state&#125;, view</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> &#123;<br>      <span class="hljs-title function_">dispatch</span>(<span class="hljs-string">&#x27;delOthersVisitedViews&#x27;</span>, view)<br>      <span class="hljs-title function_">dispatch</span>(<span class="hljs-string">&#x27;delOthersCachedViews&#x27;</span>, view)<br>      <span class="hljs-title function_">dispatch</span>(<span class="hljs-string">&#x27;delOthersViewsParams&#x27;</span>, view)<br>      <span class="hljs-title function_">resolve</span>(&#123;<br>        <span class="hljs-attr">visitedViews</span>: [...state.<span class="hljs-property">visitedViews</span>],<br>        <span class="hljs-attr">cachedViews</span>: [...state.<span class="hljs-property">cachedViews</span>],<br>        <span class="hljs-attr">viewsParams</span>: &#123;...state.<span class="hljs-property">viewsParams</span>&#125;<br>      &#125;)<br>    &#125;)<br>  &#125;,<br>  <span class="hljs-title function_">delOthersVisitedViews</span>(<span class="hljs-params">&#123;commit, state&#125;, view</span>) &#123;...&#125;,<br>  <span class="hljs-title function_">delOthersCachedViews</span>(<span class="hljs-params">&#123;commit, state&#125;, view</span>) &#123;...&#125;,<br>  <span class="hljs-title function_">delOthersViewsParams</span>(<span class="hljs-params">&#123;commit, state&#125;, view</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> &#123;<br>      <span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;DEL_OTHERS_VIEWS_PARAMS&#x27;</span>, view)<br>      <span class="hljs-title function_">resolve</span>(&#123;...state.<span class="hljs-property">viewsParams</span>&#125;)<br>    &#125;)<br>  &#125;,<br><br>  <span class="hljs-title function_">delAllViews</span>(<span class="hljs-params">&#123;dispatch, state&#125;, view</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> &#123;<br>      <span class="hljs-title function_">dispatch</span>(<span class="hljs-string">&#x27;delAllVisitedViews&#x27;</span>, view)<br>      <span class="hljs-title function_">dispatch</span>(<span class="hljs-string">&#x27;delAllCachedViews&#x27;</span>, view)<br>      <span class="hljs-title function_">dispatch</span>(<span class="hljs-string">&#x27;delAllViewsParams&#x27;</span>)<br>      <span class="hljs-title function_">resolve</span>(&#123;<br>        <span class="hljs-attr">visitedViews</span>: [...state.<span class="hljs-property">visitedViews</span>],<br>        <span class="hljs-attr">cachedViews</span>: [...state.<span class="hljs-property">cachedViews</span>],<br>        <span class="hljs-attr">viewsParams</span>: &#123;...state.<span class="hljs-property">visitedViews</span>&#125;<br>      &#125;)<br>    &#125;)<br>  &#125;,<br>  <span class="hljs-title function_">delAllVisitedViews</span>(<span class="hljs-params">&#123;commit, state&#125;</span>) &#123;...&#125;,<br>  <span class="hljs-title function_">delAllCachedViews</span>(<span class="hljs-params">&#123;commit, state&#125;</span>) &#123;...&#125;,<br>  <span class="hljs-title function_">delAllViewsParams</span>(<span class="hljs-params">&#123;commit, state&#125;</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> &#123;<br>      <span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;DEL_ALL_VIEWS_PARAMS&#x27;</span>)<br>      <span class="hljs-title function_">resolve</span>(&#123;...state.<span class="hljs-property">viewsParams</span>&#125;)<br>    &#125;)<br>  &#125;,<br><br>  <span class="hljs-title function_">updateVisitedView</span>(<span class="hljs-params">&#123;commit&#125;, view</span>) &#123;...&#125;,<br><br>  <span class="hljs-title function_">delRightTags</span>(<span class="hljs-params">&#123;commit&#125;, view</span>) &#123;...&#125;,<br><br>  <span class="hljs-title function_">delLeftTags</span>(<span class="hljs-params">&#123;commit&#125;, view</span>) &#123;...&#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  ...<br>&#125;<br><br></code></pre></td></tr></table></figure><p>修改好<code>tagView,js</code>后,就可以将需要存放的数据放到<code>viewsParams</code>中</p><figure><imgsrc="https://cdn.jsdelivr.net/gh/tippye/PicCloud@master/uPic/2022/06/23/image-20220623142537388.png"alt="使用时的viewsParams" /><figcaption aria-hidden="true">使用时的viewsParams</figcaption></figure><p>这样只需要在对应的页面中加入<code>beforeRouterEnter</code>和<code>beforeRouterLeave</code>方法即可</p><h2 id="其他问题">其他问题</h2><h3 id="下拉框显示错误">下拉框显示错误</h3><figure><imgsrc="https://cdn.jsdelivr.net/gh/tippye/PicCloud@master/uPic/2022/06/23/image-20220623143139118.png"alt="image-20220623143139118" /><figcaption aria-hidden="true">image-20220623143139118</figcaption></figure><p><strong>原因:</strong>主要是因为下拉框的绑定的数组也是从后台请求到的数据,路由跳转后赋值只会使下拉框绑定的值有值,而下拉选项的数组还是空的</p><p><strong>解决:</strong>可以在给参数赋值之前调用<code>methods</code>中对应的方法请求下拉选项对应的数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript">...<br> <span class="hljs-title function_">beforeRouteEnter</span>(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, next</span>) &#123;<br>    <span class="hljs-title function_">next</span>(<span class="hljs-function"><span class="hljs-params">vm</span> =&gt;</span> &#123;<br>      <span class="hljs-keyword">let</span> params = vm.<span class="hljs-property">$store</span>.<span class="hljs-property">state</span>.<span class="hljs-property">tagsView</span>.<span class="hljs-property">viewsParams</span>[to.<span class="hljs-property">fullPath</span>];<br>      <span class="hljs-keyword">if</span> (params &amp;&amp; params.<span class="hljs-property">queryParams</span>) &#123;<br>        <span class="hljs-comment">// 如果保存的数据中存在省的数据,就调用methods中的getCityListByProvinceid获取市下拉列表的数据</span><br>        <span class="hljs-keyword">if</span> (params.<span class="hljs-property">queryParams</span>.<span class="hljs-property">province</span>) vm.<span class="hljs-title function_">getCityListByProvinceid</span>(params.<span class="hljs-property">queryParams</span>.<span class="hljs-property">province</span>)<br>        <span class="hljs-comment">// 如果保存的数据中存在市的数据,就调用methods中的getTownListByCityid获取县下拉列表的数据</span><br>        <span class="hljs-keyword">if</span> (params.<span class="hljs-property">queryParams</span>.<span class="hljs-property">city</span>) vm.<span class="hljs-title function_">getTownListByCityid</span>(params.<span class="hljs-property">queryParams</span>.<span class="hljs-property">city</span>)<br>        vm.<span class="hljs-property">queryParams</span> = params.<span class="hljs-property">queryParams</span><br>      &#125;<br>    &#125;)<br>  &#125;,<br>...<br></code></pre></td></tr></table></figure><h2 id="参考">参考</h2><ol type="1"><li><ahref="https://router.vuejs.org/zh/guide/advanced/navigation-guards.html#完整的导航解析流程">完整的导航解析流程</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>大前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>若依</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Sun and Moon</title>
    <link href="/2022/03/10/Sun%20and%20Moon/"/>
    <url>/2022/03/10/Sun%20and%20Moon/</url>
    
    <content type="html"><![CDATA[<p>web 端的夜间模式终于玩明白了</p><p>要么给顶层标签加个标记，页面标签对应写样式</p><p>要么在 head 里加个 style 标签，里面改全局变量</p><h2 id="原理">原理</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs flowchart">st=&gt;start: 页面加载<br>cond=&gt;condition: 检查本地缓存(localStorage)<br>op1=&gt;operation: 没有本地缓存记录（夜间模式状态）<br>op2=&gt;operation: 有本地缓存记录<br>op3=&gt;operation: 读取系统主题状态<br>op4=&gt;operation: 读取本地缓存<br>op5=&gt;operation: 点击主题切换按钮<br>op6=&gt;operation: 监听系统主题变化<br>e=&gt;end: 设置主题<br><br>st-&gt;cond<br>cond(yes)-&gt;op2-&gt;op4-&gt;e<br>cond(no)-&gt;op1-&gt;op3-&gt;e<br><br></code></pre></td></tr></table></figure><h1 id="原生实现">原生实现</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- aria属性用来做无障碍 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;theme-toggle&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;theme-toggle&quot;</span> <span class="hljs-attr">aria-label</span>=<span class="hljs-string">&quot;auto&quot;</span> <span class="hljs-attr">aria-live</span>=<span class="hljs-string">&quot;polite&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sun-and-moon&quot;</span> <span class="hljs-attr">aria-hidden</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;24&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;24&quot;</span> <span class="hljs-attr">viewBox</span>=<span class="hljs-string">&quot;0 0 24 24&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 这是太阳中间的圆 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">circle</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sun&quot;</span> <span class="hljs-attr">cx</span>=<span class="hljs-string">&quot;12&quot;</span> <span class="hljs-attr">cy</span>=<span class="hljs-string">&quot;12&quot;</span> <span class="hljs-attr">r</span>=<span class="hljs-string">&quot;6&quot;</span> <span class="hljs-attr">mask</span>=<span class="hljs-string">&quot;url(#moon-mask)&quot;</span> <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;currentColor&quot;</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!-- 这是太阳一圈的阳光射线 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">g</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sun-beams&quot;</span> <span class="hljs-attr">stroke</span>=<span class="hljs-string">&quot;currentColor&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">line</span> <span class="hljs-attr">x1</span>=<span class="hljs-string">&quot;12&quot;</span> <span class="hljs-attr">y1</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">x2</span>=<span class="hljs-string">&quot;12&quot;</span> <span class="hljs-attr">y2</span>=<span class="hljs-string">&quot;3&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">line</span> <span class="hljs-attr">x1</span>=<span class="hljs-string">&quot;12&quot;</span> <span class="hljs-attr">y1</span>=<span class="hljs-string">&quot;21&quot;</span> <span class="hljs-attr">x2</span>=<span class="hljs-string">&quot;12&quot;</span> <span class="hljs-attr">y2</span>=<span class="hljs-string">&quot;23&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">line</span> <span class="hljs-attr">x1</span>=<span class="hljs-string">&quot;4.22&quot;</span> <span class="hljs-attr">y1</span>=<span class="hljs-string">&quot;4.22&quot;</span> <span class="hljs-attr">x2</span>=<span class="hljs-string">&quot;5.64&quot;</span> <span class="hljs-attr">y2</span>=<span class="hljs-string">&quot;5.64&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">line</span> <span class="hljs-attr">x1</span>=<span class="hljs-string">&quot;18.36&quot;</span> <span class="hljs-attr">y1</span>=<span class="hljs-string">&quot;18.36&quot;</span> <span class="hljs-attr">x2</span>=<span class="hljs-string">&quot;19.78&quot;</span> <span class="hljs-attr">y2</span>=<span class="hljs-string">&quot;19.78&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">line</span> <span class="hljs-attr">x1</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">y1</span>=<span class="hljs-string">&quot;12&quot;</span> <span class="hljs-attr">x2</span>=<span class="hljs-string">&quot;3&quot;</span> <span class="hljs-attr">y2</span>=<span class="hljs-string">&quot;12&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">line</span> <span class="hljs-attr">x1</span>=<span class="hljs-string">&quot;21&quot;</span> <span class="hljs-attr">y1</span>=<span class="hljs-string">&quot;12&quot;</span> <span class="hljs-attr">x2</span>=<span class="hljs-string">&quot;23&quot;</span> <span class="hljs-attr">y2</span>=<span class="hljs-string">&quot;12&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">line</span> <span class="hljs-attr">x1</span>=<span class="hljs-string">&quot;4.22&quot;</span> <span class="hljs-attr">y1</span>=<span class="hljs-string">&quot;19.78&quot;</span> <span class="hljs-attr">x2</span>=<span class="hljs-string">&quot;5.64&quot;</span> <span class="hljs-attr">y2</span>=<span class="hljs-string">&quot;18.36&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">line</span> <span class="hljs-attr">x1</span>=<span class="hljs-string">&quot;18.36&quot;</span> <span class="hljs-attr">y1</span>=<span class="hljs-string">&quot;5.64&quot;</span> <span class="hljs-attr">x2</span>=<span class="hljs-string">&quot;19.78&quot;</span> <span class="hljs-attr">y2</span>=<span class="hljs-string">&quot;4.22&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">g</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 这是一个遮罩层，用来遮住太阳的圆变成月亮，参考下面示意图 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mask</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;moon&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;moon-mask&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">rect</span> <span class="hljs-attr">x</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">y</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;100%&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;100%&quot;</span> <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;white&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">circle</span> <span class="hljs-attr">cx</span>=<span class="hljs-string">&quot;24&quot;</span> <span class="hljs-attr">cy</span>=<span class="hljs-string">&quot;10&quot;</span> <span class="hljs-attr">r</span>=<span class="hljs-string">&quot;6&quot;</span> <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;black&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mask</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.theme-toggle</span> &#123;<br>  <span class="hljs-attr">--size</span>: <span class="hljs-number">2rem</span>;<br>  <br>  <span class="hljs-attribute">background</span>: none;<br>  <span class="hljs-attribute">border</span>: none;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br><br>  <span class="hljs-attribute">inline-size</span>: <span class="hljs-built_in">var</span>(--size);<br>  <span class="hljs-attribute">block-size</span>: <span class="hljs-built_in">var</span>(--size);<br>  aspect-ratio: <span class="hljs-number">1</span>;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;<br><br>  <span class="hljs-attribute">cursor</span>: pointer;<br>  touch-action: manipulation;<br>  -webkit-tap-highlight-<span class="hljs-attribute">color</span>: transparent;<br>  <span class="hljs-attribute">outline-offset</span>: <span class="hljs-number">5px</span>;<br><br>  <span class="hljs-comment">/* 对于无鼠标的用户，增大图标 */</span><br>  <span class="hljs-keyword">@media</span> (<span class="hljs-attribute">hover</span>: none) &#123;<br>    <span class="hljs-attr">--size</span>: <span class="hljs-number">48px</span>;<br>  &#125;<br>&#125;<br><span class="hljs-selector-class">.theme-toggle</span> &gt; svg &#123;<br>  <span class="hljs-attribute">inline-size</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">block-size</span>: <span class="hljs-number">100%</span>;<br>  stroke-linecap: round;<br>&#125;<br><span class="hljs-selector-class">.sun-and-moon</span> &gt; <span class="hljs-selector-pseudo">:is</span>(<span class="hljs-selector-class">.moon</span>, <span class="hljs-selector-class">.sun</span>, <span class="hljs-selector-class">.sun-beams</span>)&#123;<br>  <span class="hljs-attribute">transform-origin</span>: center center;<br>&#125;<br><span class="hljs-selector-class">.sun-and-moon</span> &gt; <span class="hljs-selector-pseudo">:is</span>(<span class="hljs-selector-class">.moon</span>, <span class="hljs-selector-class">.sun</span>)&#123;<br>  fill: <span class="hljs-built_in">var</span>(--icon-fill);<br>&#125;<br><span class="hljs-selector-class">.sun-and-moon</span> &gt; <span class="hljs-selector-class">.sum-beams</span>&#123;<br>  stroke: <span class="hljs-built_in">var</span>(--icon-fill);<br>  stroke-<span class="hljs-attribute">width</span>: <span class="hljs-number">2px</span>;<br>&#125;<br><span class="hljs-selector-class">.theme-toggle</span><span class="hljs-selector-pseudo">:is</span>(<span class="hljs-selector-pseudo">:hover</span>, <span class="hljs-selector-pseudo">:focus</span>-visible) &gt; (<span class="hljs-selector-class">.sun-and-moon</span> &gt; <span class="hljs-selector-pseudo">:is</span>(<span class="hljs-selector-class">.moon</span>, <span class="hljs-selector-class">.sun</span>))&#123;<br> fill: <span class="hljs-built_in">var</span>(--icon-fill-hover);<br>&#125;<br><span class="hljs-selector-class">.theme-toggle</span><span class="hljs-selector-pseudo">:is</span>(<span class="hljs-selector-pseudo">:hover</span>, <span class="hljs-selector-pseudo">:focus</span>-visible) (<span class="hljs-selector-class">.sun-and-moon</span> &gt; <span class="hljs-selector-class">.sun-beams</span>)&#123;<br>  stroke: <span class="hljs-built_in">var</span>(--icon-fill-hover);<br>&#125;<br><br><span class="hljs-selector-class">.sun-and-moon</span><span class="hljs-selector-attr">[data-theme=<span class="hljs-string">&quot;dark&quot;</span>]</span> &gt; <span class="hljs-selector-class">.sun</span>&#123;<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(<span class="hljs-number">1.75</span>);<br>  <span class="hljs-attribute">transition-timing-function</span>: <span class="hljs-built_in">cubic-bezier</span>(.<span class="hljs-number">25</span>,<span class="hljs-number">0</span>,.<span class="hljs-number">3</span>,<span class="hljs-number">1</span>);<br>  <span class="hljs-attribute">transition-duration</span>: .<span class="hljs-number">25s</span>;<br>&#125;<br><span class="hljs-selector-class">.sun-and-moon</span><span class="hljs-selector-attr">[data-theme=<span class="hljs-string">&quot;dark&quot;</span>]</span> &gt; <span class="hljs-selector-class">.sun-beams</span>&#123;<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotateZ</span>(-<span class="hljs-number">25deg</span>);<br>  <span class="hljs-attribute">transition-duration</span>: .<span class="hljs-number">15s</span>;<br>&#125;<br><span class="hljs-selector-class">.sun-and-moon</span><span class="hljs-selector-attr">[data-theme=<span class="hljs-string">&quot;dark&quot;</span>]</span> &gt; <span class="hljs-selector-class">.moon</span> &gt; circle&#123;<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(-<span class="hljs-number">7px</span>);<br><br>  <span class="hljs-keyword">@supports</span> (<span class="hljs-attribute">cx</span>: <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(<span class="hljs-number">0</span>);<br>    cx: <span class="hljs-number">17</span>;<br>  &#125;<br>&#125;<br><br><br><span class="hljs-selector-class">.sun-and-moon</span> &gt; <span class="hljs-selector-class">.sun</span> &#123;<br>  <span class="hljs-attribute">transition</span>: transform .<span class="hljs-number">5s</span> <span class="hljs-built_in">cubic-bezier</span>(.<span class="hljs-number">5</span>,<span class="hljs-number">1.25</span>,.<span class="hljs-number">75</span>,<span class="hljs-number">1.25</span>);<br>&#125;<br><span class="hljs-selector-class">.sun-and-moon</span> &gt; <span class="hljs-selector-class">.sun-beams</span>&#123;<br>  <span class="hljs-attribute">transition</span>: <br>    transform .<span class="hljs-number">5s</span> <span class="hljs-built_in">var</span>(--ease-elastic-<span class="hljs-number">4</span>),<br>    opacity .<span class="hljs-number">5s</span> <span class="hljs-built_in">var</span>(--ease-<span class="hljs-number">3</span>)<br>  ;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> storageKey = <span class="hljs-string">&#x27;theme-preference&#x27;</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">getColorPreference</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(storageKey))<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(storageKey)<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">matchMedia</span>(<span class="hljs-string">&#x27;(prefers-color-scheme: dark)&#x27;</span>).<span class="hljs-property">matches</span><br>      ? <span class="hljs-string">&#x27;dark&#x27;</span><br>      : <span class="hljs-string">&#x27;light&#x27;</span><br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">setPreference</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(storageKey, theme.<span class="hljs-property">value</span>)<br>  <span class="hljs-title function_">reflectPreference</span>()<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">reflectPreference</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-property">firstElementChild</span><br>    .<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;data-theme&#x27;</span>, theme.<span class="hljs-property">value</span>)<br><br>  <span class="hljs-variable language_">document</span><br>    .<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#theme-toggle&#x27;</span>)<br>    ?.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;aria-label&#x27;</span>, theme.<span class="hljs-property">value</span>)<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">onClick</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  theme.<span class="hljs-property">value</span> = theme.<span class="hljs-property">value</span> === <span class="hljs-string">&#x27;light&#x27;</span><br>    ? <span class="hljs-string">&#x27;dark&#x27;</span><br>    : <span class="hljs-string">&#x27;light&#x27;</span><br><br>  <span class="hljs-title function_">setPreference</span>()<br>&#125;<br><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">// set on load so screen readers can get the latest value on the button</span><br>  <span class="hljs-title function_">reflectPreference</span>()<br><br>  <span class="hljs-comment">// now this script can find and listen for clicks on the control</span><br>  <span class="hljs-variable language_">document</span><br>    .<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#theme-toggle&#x27;</span>)<br>    .<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, onClick)<br>&#125;<br><span class="hljs-comment">//同步系统主题</span><br><span class="hljs-variable language_">window</span><br>  .<span class="hljs-title function_">matchMedia</span>(<span class="hljs-string">&#x27;(prefers-color-scheme: dark)&#x27;</span>)<br>  .<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;change&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">&#123;matches:isDark&#125;</span>) =&gt;</span> &#123;<br>    theme.<span class="hljs-property">value</span> = isDark ? <span class="hljs-string">&#x27;dark&#x27;</span> : <span class="hljs-string">&#x27;light&#x27;</span><br>    <span class="hljs-title function_">setPreference</span>()<br>  &#125;)<br></code></pre></td></tr></table></figure><figure><img src="http://static.tippy.icu/blogImg/eHGsxT.jpg" alt="svg原理图" /><figcaption aria-hidden="true">svg原理图</figcaption></figure><blockquote><p>此按钮样式转载于<ahref="https://web.dev/building-a-theme-switch-component/">AdamArgyle的博客</a></p></blockquote><h1 id="vue3实现">Vue3实现</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>...<br>&lt;button aria-label=<span class="hljs-string">&quot;auto&quot;</span> aria-live=<span class="hljs-string">&quot;polite&quot;</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;relative sun-and-moon-box&quot;</span> @click=<span class="hljs-string">&quot;handleSetDarkMode&quot;</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">aria-hidden</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sun-and-moon rounded-full&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;24&quot;</span> <span class="hljs-attr">viewBox</span>=<span class="hljs-string">&quot;0 0 24 24&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;24&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">circle</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sun text-yellow-300 shadow-sm shadow-amber-300 dark:text-gray-100&quot;</span> <span class="hljs-attr">cx</span>=<span class="hljs-string">&quot;12&quot;</span> <span class="hljs-attr">cy</span>=<span class="hljs-string">&quot;12&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;currentColor&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">mask</span>=<span class="hljs-string">&quot;url(#moon-mask)&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">r</span>=<span class="hljs-string">&quot;6&quot;</span>/&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">g</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sun-beams text-yellow-300 dark:text-gray-100&quot;</span> <span class="hljs-attr">stroke</span>=<span class="hljs-string">&quot;currentColor&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">line</span> <span class="hljs-attr">x1</span>=<span class="hljs-string">&quot;12&quot;</span> <span class="hljs-attr">x2</span>=<span class="hljs-string">&quot;12&quot;</span> <span class="hljs-attr">y1</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">y2</span>=<span class="hljs-string">&quot;3&quot;</span>/&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">line</span> <span class="hljs-attr">x1</span>=<span class="hljs-string">&quot;12&quot;</span> <span class="hljs-attr">x2</span>=<span class="hljs-string">&quot;12&quot;</span> <span class="hljs-attr">y1</span>=<span class="hljs-string">&quot;21&quot;</span> <span class="hljs-attr">y2</span>=<span class="hljs-string">&quot;23&quot;</span>/&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">line</span> <span class="hljs-attr">x1</span>=<span class="hljs-string">&quot;4.22&quot;</span> <span class="hljs-attr">x2</span>=<span class="hljs-string">&quot;5.64&quot;</span> <span class="hljs-attr">y1</span>=<span class="hljs-string">&quot;4.22&quot;</span> <span class="hljs-attr">y2</span>=<span class="hljs-string">&quot;5.64&quot;</span>/&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">line</span> <span class="hljs-attr">x1</span>=<span class="hljs-string">&quot;18.36&quot;</span> <span class="hljs-attr">x2</span>=<span class="hljs-string">&quot;19.78&quot;</span> <span class="hljs-attr">y1</span>=<span class="hljs-string">&quot;18.36&quot;</span> <span class="hljs-attr">y2</span>=<span class="hljs-string">&quot;19.78&quot;</span>/&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">line</span> <span class="hljs-attr">x1</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">x2</span>=<span class="hljs-string">&quot;3&quot;</span> <span class="hljs-attr">y1</span>=<span class="hljs-string">&quot;12&quot;</span> <span class="hljs-attr">y2</span>=<span class="hljs-string">&quot;12&quot;</span>/&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">line</span> <span class="hljs-attr">x1</span>=<span class="hljs-string">&quot;21&quot;</span> <span class="hljs-attr">x2</span>=<span class="hljs-string">&quot;23&quot;</span> <span class="hljs-attr">y1</span>=<span class="hljs-string">&quot;12&quot;</span> <span class="hljs-attr">y2</span>=<span class="hljs-string">&quot;12&quot;</span>/&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">line</span> <span class="hljs-attr">x1</span>=<span class="hljs-string">&quot;4.22&quot;</span> <span class="hljs-attr">x2</span>=<span class="hljs-string">&quot;5.64&quot;</span> <span class="hljs-attr">y1</span>=<span class="hljs-string">&quot;19.78&quot;</span> <span class="hljs-attr">y2</span>=<span class="hljs-string">&quot;18.36&quot;</span>/&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">line</span> <span class="hljs-attr">x1</span>=<span class="hljs-string">&quot;18.36&quot;</span> <span class="hljs-attr">x2</span>=<span class="hljs-string">&quot;19.78&quot;</span> <span class="hljs-attr">y1</span>=<span class="hljs-string">&quot;5.64&quot;</span> <span class="hljs-attr">y2</span>=<span class="hljs-string">&quot;4.22&quot;</span>/&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">g</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">mask</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;moon-mask&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;moon text-gray-darkest dark:text-gray-100&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">rect</span> <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;white&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;100%&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;100%&quot;</span> <span class="hljs-attr">x</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">y</span>=<span class="hljs-string">&quot;0&quot;</span>/&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">circle</span> <span class="hljs-attr">cx</span>=<span class="hljs-string">&quot;24&quot;</span> <span class="hljs-attr">cy</span>=<span class="hljs-string">&quot;10&quot;</span> <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;black&quot;</span> <span class="hljs-attr">r</span>=<span class="hljs-string">&quot;6&quot;</span>/&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">mask</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span></span><br>&lt;/button&gt;<br>...<br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/store&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123;computed, inject&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">...</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">let</span> darkMode = <span class="hljs-title function_">computed</span>(<span class="hljs-function">() =&gt;</span> store.<span class="hljs-property">state</span>.<span class="hljs-property">settings</span>.<span class="hljs-property">darkMode</span>)<span class="hljs-comment">//这里的值是布尔值</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> <span class="hljs-title function_">handleSetDarkMode</span> = (<span class="hljs-params"></span>) =&gt; &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;handleSetDarkMode&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">  store.<span class="hljs-title function_">dispatch</span>(<span class="hljs-string">&#x27;settings/toggleDarkMode&#x27;</span>, &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">value</span>: !darkMode.<span class="hljs-property">value</span></span></span><br><span class="language-javascript"><span class="language-xml">  &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml">...</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;scss&quot;</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.sun-and-moon-box</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">width</span>: <span class="hljs-number">24px</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">height</span>: <span class="hljs-number">24px</span>;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.sun-and-moon</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">cursor</span>: pointer;</span></span><br><span class="language-css"><span class="language-xml">  touch-action: manipulation;</span></span><br><span class="language-css"><span class="language-xml">  -webkit-tap-highlight-<span class="hljs-attribute">color</span>: transparent;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">outline-offset</span>: <span class="hljs-number">5px</span>;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml">  &amp; &gt; svg &#123;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">inline-size</span>: <span class="hljs-number">100%</span>;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">block-size</span>: <span class="hljs-number">100%</span>;</span></span><br><span class="language-css"><span class="language-xml">    stroke-linecap: round;</span></span><br><span class="language-css"><span class="language-xml">  &#125;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml">  &amp; &gt; * &#123;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">transform-origin</span>: center center;;</span></span><br><span class="language-css"><span class="language-xml">  &#125;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml">  &amp; &gt; <span class="hljs-selector-class">.sun</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">transition</span>: transform .<span class="hljs-number">5s</span> <span class="hljs-built_in">cubic-bezier</span>(.<span class="hljs-number">5</span>, <span class="hljs-number">1.25</span>, .<span class="hljs-number">75</span>, <span class="hljs-number">1.25</span>);</span></span><br><span class="language-css"><span class="language-xml">  &#125;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml">  &amp; &gt; <span class="hljs-selector-class">.sun-beams</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">transition</span>: transform .<span class="hljs-number">5s</span> <span class="hljs-built_in">cubic-bezier</span>(.<span class="hljs-number">5</span>, <span class="hljs-number">1.5</span>, .<span class="hljs-number">75</span>, <span class="hljs-number">1.25</span>),</span></span><br><span class="language-css"><span class="language-xml">    opacity .<span class="hljs-number">5s</span> <span class="hljs-built_in">cubic-bezier</span>(.<span class="hljs-number">25</span>, <span class="hljs-number">0</span>, .<span class="hljs-number">3</span>, <span class="hljs-number">1</span>);</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml">    &amp; &gt; line &#123;</span></span><br><span class="language-css"><span class="language-xml">      <span class="hljs-attribute">color</span>: inherit;</span></span><br><span class="language-css"><span class="language-xml">    &#125;</span></span><br><span class="language-css"><span class="language-xml">  &#125;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml">  &amp; &gt; <span class="hljs-selector-class">.moon</span> &gt; circle &#123;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">transition-delay</span>: .<span class="hljs-number">25s</span>;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">transition-duration</span>: .<span class="hljs-number">5s</span>;</span></span><br><span class="language-css"><span class="language-xml">  &#125;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-comment">/* 这里的dark是html的类名，切换成深色模式时会给html添加dark类名 */</span></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.dark</span> <span class="hljs-selector-class">.sun-and-moon</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  &amp; &gt; <span class="hljs-selector-class">.sun</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(<span class="hljs-number">1.5</span>);</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">transition-timing-function</span>: <span class="hljs-built_in">cubic-bezier</span>(.<span class="hljs-number">25</span>, <span class="hljs-number">0</span>, .<span class="hljs-number">3</span>, <span class="hljs-number">1</span>);</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">transition-duration</span>: .<span class="hljs-number">25s</span>;</span></span><br><span class="language-css"><span class="language-xml">  &#125;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml">  &amp; &gt; <span class="hljs-selector-class">.sun-beams</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">transition-duration</span>: .<span class="hljs-number">15s</span></span></span><br><span class="language-css"><span class="language-xml">  &#125;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml">  &amp; &gt; <span class="hljs-selector-class">.moon</span> &gt; circle &#123;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(-<span class="hljs-number">7px</span>);</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">transition</span>: transform .<span class="hljs-number">25s</span> <span class="hljs-built_in">cubic-bezier</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>);</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-keyword">@supports</span> (<span class="hljs-attribute">cx</span>: <span class="hljs-number">1</span>) &#123;</span></span><br><span class="language-css"><span class="language-xml">      <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(<span class="hljs-number">0</span>);</span></span><br><span class="language-css"><span class="language-xml">      cx: <span class="hljs-number">17</span>;</span></span><br><span class="language-css"><span class="language-xml">      <span class="hljs-attribute">transition</span>: cx .<span class="hljs-number">25s</span> <span class="hljs-built_in">cubic-bezier</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>);</span></span><br><span class="language-css"><span class="language-xml">    &#125;</span></span><br><span class="language-css"><span class="language-xml">  &#125;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//这是vuex的/store/modules/settings.vue</span><br><span class="hljs-keyword">const</span> state = &#123;<br>...<br>  <span class="hljs-comment">//夜间模式</span><br>  <span class="hljs-attr">darkMode</span>: <span class="hljs-literal">false</span>,<br>...<br>&#125;<br><br><span class="hljs-keyword">const</span> mutations = &#123;<br>    <span class="hljs-attr">CHANGE_SETTING</span>: <span class="hljs-function">(<span class="hljs-params">state, &#123;key, value&#125;</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (state.<span class="hljs-title function_">hasOwnProperty</span>(key)) &#123;<br>            state[key] = value<br>            <span class="hljs-title class_">Cookie</span>.<span class="hljs-title function_">set</span>(key, value)<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> actions = &#123;<br>    ...<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 更改夜间模式</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> <span class="hljs-variable">commit</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value&#123;Boolean&#125; true:夜间模式|false:默认主题</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">Promise&lt;void&gt;</span>&#125;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">async</span> <span class="hljs-title function_">toggleDarkMode</span>(<span class="hljs-params">&#123;commit&#125;, &#123;value&#125;</span>) &#123;<br>        value ? <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;dark&#x27;</span>) : <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">classList</span>.<span class="hljs-title function_">remove</span>(<span class="hljs-string">&#x27;dark&#x27;</span>)<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;toggleDarkMode&#x27;</span>)<br>        <span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;CHANGE_SETTING&#x27;</span>, &#123;<span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;darkMode&#x27;</span>, value&#125;)<br>    &#125;,<br>    ...<br>&#125;<br><br>...<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>大前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>特效</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
